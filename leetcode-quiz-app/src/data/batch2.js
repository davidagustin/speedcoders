// LeetCode Problems 501-1000
export const batch2Problems = [
  // Problems 501-600
  {id:501,title:"Find Mode in Binary Search Tree",difficulty:"Easy",algorithms:["Tree","DFS","Binary Search Tree","Inorder","Hash Table"],correctAlgorithms:["Tree","DFS","Binary Search Tree"],description:"Find mode in BST"},
  {id:502,title:"IPO",difficulty:"Hard",algorithms:["Array","Greedy","Sorting","Heap","Priority Queue"],correctAlgorithms:["Array","Greedy","Sorting","Heap"],description:"Maximum capital after IPOs"},
  {id:503,title:"Next Greater Element II",difficulty:"Medium",algorithms:["Array","Stack","Monotonic Stack","Circular Array","Modulo"],correctAlgorithms:["Array","Stack","Monotonic Stack"],description:"Next greater in circular array"},
  {id:504,title:"Base 7",difficulty:"Easy",algorithms:["Math","Base Conversion","String","Division","Modulo"],correctAlgorithms:["Math"],description:"Convert to base 7"},
  {id:505,title:"The Maze II",difficulty:"Medium",algorithms:["DFS","BFS","Graph","Heap","Shortest Path"],correctAlgorithms:["DFS","BFS","Graph","Heap"],description:"Shortest distance in maze"},
  {id:506,title:"Relative Ranks",difficulty:"Easy",algorithms:["Array","Sorting","Heap","Priority Queue","Ranking"],correctAlgorithms:["Array","Sorting","Heap"],description:"Assign relative ranks"},
  {id:507,title:"Perfect Number",difficulty:"Easy",algorithms:["Math","Enumeration","Divisors","Sum","Pattern"],correctAlgorithms:["Math","Enumeration"],description:"Check if perfect number"},
  {id:508,title:"Most Frequent Subtree Sum",difficulty:"Medium",algorithms:["Tree","DFS","Hash Table","Binary Tree","Subtree"],correctAlgorithms:["Tree","DFS","Hash Table","Binary Tree"],description:"Find most frequent subtree sum"},
  {id:509,title:"Fibonacci Number",difficulty:"Easy",algorithms:["Math","Dynamic Programming","Recursion","Memoization","Matrix"],correctAlgorithms:["Math","Dynamic Programming","Recursion","Memoization"],description:"Calculate Fibonacci number"},
  {id:510,title:"Inorder Successor in BST II",difficulty:"Medium",algorithms:["Tree","Binary Search Tree","Parent Pointer","Successor","Navigation"],correctAlgorithms:["Tree","Binary Search Tree"],description:"Find successor with parent pointer"},
  {id:511,title:"Game Play Analysis I",difficulty:"Easy",algorithms:["Database","SQL","Group By","Min","Date"],correctAlgorithms:["Database"],description:"Find first login date"},
  {id:512,title:"Game Play Analysis II",difficulty:"Easy",algorithms:["Database","SQL","Join","Subquery","First Value"],correctAlgorithms:["Database"],description:"Find device on first login"},
  {id:513,title:"Find Bottom Left Tree Value",difficulty:"Medium",algorithms:["Tree","DFS","BFS","Binary Tree","Level Order"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree"],description:"Find bottom left value"},
  {id:514,title:"Freedom Trail",difficulty:"Hard",algorithms:["String","Dynamic Programming","DFS","BFS","Ring"],correctAlgorithms:["String","Dynamic Programming","DFS","BFS"],description:"Minimum steps for spell"},
  {id:515,title:"Find Largest Value in Each Tree Row",difficulty:"Medium",algorithms:["Tree","DFS","BFS","Binary Tree","Level Maximum"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree"],description:"Maximum value per level"},
  {id:516,title:"Longest Palindromic Subsequence",difficulty:"Medium",algorithms:["String","Dynamic Programming","Palindrome","LCS","Memoization"],correctAlgorithms:["String","Dynamic Programming"],description:"Longest palindromic subsequence"},
  {id:517,title:"Super Washing Machines",difficulty:"Hard",algorithms:["Array","Greedy","Math","Load Balancing","Prefix Sum"],correctAlgorithms:["Array","Greedy","Math"],description:"Minimum moves to balance"},
  {id:518,title:"Coin Change II",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Knapsack","Combination","Unbounded"],correctAlgorithms:["Array","Dynamic Programming"],description:"Number of coin combinations"},
  {id:519,title:"Random Flip Matrix",difficulty:"Medium",algorithms:["Hash Table","Math","Randomized","Fisher-Yates","Reservoir Sampling"],correctAlgorithms:["Hash Table","Math","Randomized","Reservoir Sampling"],description:"Random flip in matrix"},
  {id:520,title:"Detect Capital",difficulty:"Easy",algorithms:["String","Validation","Pattern","Regular Expression","Cases"],correctAlgorithms:["String"],description:"Detect capital usage"},
  {id:521,title:"Longest Uncommon Subsequence I",difficulty:"Easy",algorithms:["String","Math","Brainteaser","Logic","Comparison"],correctAlgorithms:["String","Math","Brainteaser"],description:"Longest uncommon subsequence"},
  {id:522,title:"Longest Uncommon Subsequence II",difficulty:"Medium",algorithms:["Array","Hash Table","Two Pointers","String","Sorting"],correctAlgorithms:["Array","Hash Table","Two Pointers","String","Sorting"],description:"Longest uncommon among strings"},
  {id:523,title:"Continuous Subarray Sum",difficulty:"Medium",algorithms:["Array","Hash Table","Math","Prefix Sum","Modulo"],correctAlgorithms:["Array","Hash Table","Math","Prefix Sum"],description:"Subarray sum multiple of k"},
  {id:524,title:"Longest Word in Dictionary through Deleting",difficulty:"Medium",algorithms:["Array","Two Pointers","String","Sorting","Subsequence"],correctAlgorithms:["Array","Two Pointers","String","Sorting"],description:"Longest word by deleting"},
  {id:525,title:"Contiguous Array",difficulty:"Medium",algorithms:["Array","Hash Table","Prefix Sum","Balance","Counter"],correctAlgorithms:["Array","Hash Table","Prefix Sum"],description:"Maximum length balanced array"},
  {id:526,title:"Beautiful Arrangement",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Backtracking","Bit Manipulation","Permutation"],correctAlgorithms:["Array","Dynamic Programming","Backtracking","Bit Manipulation"],description:"Count beautiful arrangements"},
  {id:527,title:"Word Abbreviation",difficulty:"Hard",algorithms:["Array","String","Greedy","Sorting","Trie"],correctAlgorithms:["Array","String","Greedy","Sorting","Trie"],description:"Unique abbreviations for words"},
  {id:528,title:"Random Pick with Weight",difficulty:"Medium",algorithms:["Array","Math","Binary Search","Prefix Sum","Randomized"],correctAlgorithms:["Array","Math","Binary Search","Prefix Sum","Randomized"],description:"Random pick with weight"},
  {id:529,title:"Minesweeper",difficulty:"Medium",algorithms:["Array","DFS","BFS","Matrix","Simulation"],correctAlgorithms:["Array","DFS","BFS","Matrix"],description:"Reveal minesweeper board"},
  {id:530,title:"Minimum Absolute Difference in BST",difficulty:"Easy",algorithms:["Tree","DFS","Binary Search Tree","Binary Tree","Inorder"],correctAlgorithms:["Tree","DFS","Binary Search Tree","Binary Tree"],description:"Minimum difference in BST"},
  {id:531,title:"Lonely Pixel I",difficulty:"Medium",algorithms:["Array","Hash Table","Matrix","Counting","Row/Column"],correctAlgorithms:["Array","Hash Table","Matrix"],description:"Count lonely black pixels"},
  {id:532,title:"K-diff Pairs in an Array",difficulty:"Medium",algorithms:["Array","Hash Table","Two Pointers","Binary Search","Sorting"],correctAlgorithms:["Array","Hash Table","Two Pointers","Binary Search","Sorting"],description:"Count k-diff pairs"},
  {id:533,title:"Lonely Pixel II",difficulty:"Medium",algorithms:["Array","Hash Table","Matrix","Counting","Pattern"],correctAlgorithms:["Array","Hash Table","Matrix"],description:"Count lonely pixels with rule"},
  {id:534,title:"Game Play Analysis III",difficulty:"Medium",algorithms:["Database","SQL","Window Function","Running Total","Sum"],correctAlgorithms:["Database"],description:"Games played so far"},
  {id:535,title:"Encode and Decode TinyURL",difficulty:"Medium",algorithms:["Hash Table","String","Design","Hash Function","Encoding"],correctAlgorithms:["Hash Table","String","Design","Math"],description:"Design URL shortener"},
  {id:536,title:"Construct Binary Tree from String",difficulty:"Medium",algorithms:["String","Stack","Tree","DFS","Binary Tree"],correctAlgorithms:["String","Stack","Tree","DFS","Binary Tree"],description:"Build tree from string"},
  {id:537,title:"Complex Number Multiplication",difficulty:"Medium",algorithms:["Math","String","Simulation","Parsing","Complex"],correctAlgorithms:["Math","String","Simulation"],description:"Multiply complex numbers"},
  {id:538,title:"Convert BST to Greater Tree",difficulty:"Medium",algorithms:["Tree","DFS","Binary Search Tree","Binary Tree","Reverse Inorder"],correctAlgorithms:["Tree","DFS","Binary Search Tree","Binary Tree"],description:"Convert to greater sum tree"},
  {id:539,title:"Minimum Time Difference",difficulty:"Medium",algorithms:["Array","Math","String","Sorting","Time"],correctAlgorithms:["Array","Math","String","Sorting"],description:"Minimum time difference"},
  {id:540,title:"Single Element in Sorted Array",difficulty:"Medium",algorithms:["Array","Binary Search","XOR","Bit Manipulation","Pattern"],correctAlgorithms:["Array","Binary Search"],description:"Find single element"},
  {id:541,title:"Reverse String II",difficulty:"Easy",algorithms:["Two Pointers","String","Simulation","Pattern","Reverse"],correctAlgorithms:["Two Pointers","String"],description:"Reverse string by k"},
  {id:542,title:"01 Matrix",difficulty:"Medium",algorithms:["Array","Dynamic Programming","BFS","Matrix","Multi-source BFS"],correctAlgorithms:["Array","Dynamic Programming","BFS","Matrix"],description:"Distance to nearest 0"},
  {id:543,title:"Diameter of Binary Tree",difficulty:"Easy",algorithms:["Tree","DFS","Binary Tree","Recursion","Height"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Find tree diameter"},
  {id:544,title:"Output Contest Matches",difficulty:"Medium",algorithms:["String","Simulation","Recursion","Tournament","Pattern"],correctAlgorithms:["String","Simulation","Recursion"],description:"Generate tournament brackets"},
  {id:545,title:"Boundary of Binary Tree",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Traversal","Boundary"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Tree boundary traversal"},
  {id:546,title:"Remove Boxes",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Memoization","Interval DP","Game"],correctAlgorithms:["Array","Dynamic Programming","Memoization"],description:"Maximum points removing boxes"},
  {id:547,title:"Number of Provinces",difficulty:"Medium",algorithms:["DFS","BFS","Union Find","Graph","Connected Components"],correctAlgorithms:["DFS","BFS","Union Find","Graph"],description:"Count friend circles"},
  {id:548,title:"Split Array with Equal Sum",difficulty:"Hard",algorithms:["Array","Hash Table","Prefix Sum","Three Cuts","Optimization"],correctAlgorithms:["Array","Hash Table","Prefix Sum"],description:"Split into four equal parts"},
  {id:549,title:"Binary Tree Longest Consecutive Sequence II",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Path","Consecutive"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Longest consecutive path"},
  {id:550,title:"Game Play Analysis IV",difficulty:"Medium",algorithms:["Database","SQL","Join","Date Functions","Retention"],correctAlgorithms:["Database"],description:"Player retention rate"},
  {id:551,title:"Student Attendance Record I",difficulty:"Easy",algorithms:["String","Counting","Validation","Pattern","State"],correctAlgorithms:["String"],description:"Check attendance record"},
  {id:552,title:"Student Attendance Record II",difficulty:"Hard",algorithms:["Dynamic Programming","State Machine","Matrix Exponentiation","Counting","Pattern"],correctAlgorithms:["Dynamic Programming"],description:"Count valid attendance records"},
  {id:553,title:"Optimal Division",difficulty:"Medium",algorithms:["Array","Math","Dynamic Programming","String","Pattern"],correctAlgorithms:["Array","Math","Dynamic Programming","String"],description:"Maximum division result"},
  {id:554,title:"Brick Wall",difficulty:"Medium",algorithms:["Array","Hash Table","Counting","Prefix Sum","Line"],correctAlgorithms:["Array","Hash Table"],description:"Minimum bricks to cross"},
  {id:555,title:"Split Concatenated Strings",difficulty:"Medium",algorithms:["Array","String","Greedy","Enumeration","Optimization"],correctAlgorithms:["Array","String","Greedy"],description:"Largest concatenated string"},
  {id:556,title:"Next Greater Element III",difficulty:"Medium",algorithms:["Math","Two Pointers","String","Next Permutation","Swap"],correctAlgorithms:["Math","Two Pointers","String"],description:"Next greater with same digits"},
  {id:557,title:"Reverse Words in String III",difficulty:"Easy",algorithms:["Two Pointers","String","Reverse","Split","In-place"],correctAlgorithms:["Two Pointers","String"],description:"Reverse each word"},
  {id:558,title:"Logical OR of Two Binary Grids",difficulty:"Medium",algorithms:["Divide and Conquer","Tree","Recursion","Quad Tree","Merge"],correctAlgorithms:["Divide and Conquer","Tree","Recursion"],description:"Quad tree intersection"},
  {id:559,title:"Maximum Depth of N-ary Tree",difficulty:"Easy",algorithms:["Tree","DFS","BFS","N-ary Tree","Recursion"],correctAlgorithms:["Tree","DFS","BFS"],description:"Maximum depth of N-ary tree"},
  {id:560,title:"Subarray Sum Equals K",difficulty:"Medium",algorithms:["Array","Hash Table","Prefix Sum","Counter","Subarray"],correctAlgorithms:["Array","Hash Table","Prefix Sum"],description:"Count subarrays with sum k"},
  {id:561,title:"Array Partition",difficulty:"Easy",algorithms:["Array","Greedy","Sorting","Math","Pairing"],correctAlgorithms:["Array","Greedy","Sorting","Counting Sort"],description:"Maximum sum of min pairs"},
  {id:562,title:"Longest Line of Consecutive One",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Matrix","Direction","Pattern"],correctAlgorithms:["Array","Dynamic Programming","Matrix"],description:"Longest line of 1s"},
  {id:563,title:"Binary Tree Tilt",difficulty:"Easy",algorithms:["Tree","DFS","Binary Tree","Recursion","Sum"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Calculate tree tilt"},
  {id:564,title:"Find the Closest Palindrome",difficulty:"Hard",algorithms:["Math","String","Palindrome","Edge Cases","Pattern"],correctAlgorithms:["Math","String"],description:"Find closest palindrome"},
  {id:565,title:"Array Nesting",difficulty:"Medium",algorithms:["Array","DFS","Graph","Cycle","In-place"],correctAlgorithms:["Array","DFS"],description:"Longest array nesting"},
  {id:566,title:"Reshape the Matrix",difficulty:"Easy",algorithms:["Array","Matrix","Simulation","Flatten","Reshape"],correctAlgorithms:["Array","Matrix","Simulation"],description:"Reshape matrix"},
  {id:568,title:"Maximum Vacation Days",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Matrix","Graph","Optimization"],correctAlgorithms:["Array","Dynamic Programming","Matrix"],description:"Maximum vacation days"},
  {id:569,title:"Median Employee Salary",difficulty:"Hard",algorithms:["Database","SQL","Window Function","Median","Partition"],correctAlgorithms:["Database"],description:"Find median salary"},
  {id:570,title:"Managers with 5 Direct Reports",difficulty:"Medium",algorithms:["Database","SQL","Group By","Having","Count"],correctAlgorithms:["Database"],description:"Managers with 5+ reports"},
  {id:571,title:"Find Median Given Frequency",difficulty:"Hard",algorithms:["Database","SQL","Window Function","Cumulative Sum","Median"],correctAlgorithms:["Database"],description:"Find median from frequency"},
  {id:572,title:"Subtree of Another Tree",difficulty:"Easy",algorithms:["Tree","DFS","Binary Tree","String Matching","Serialization"],correctAlgorithms:["Tree","DFS","Binary Tree","String Matching"],description:"Check if subtree"},
  {id:573,title:"Squirrel Simulation",difficulty:"Medium",algorithms:["Array","Math","Simulation","Distance","Optimization"],correctAlgorithms:["Array","Math"],description:"Minimum distance for squirrel"},
  {id:574,title:"Winning Candidate",difficulty:"Medium",algorithms:["Database","SQL","Join","Group By","Max"],correctAlgorithms:["Database"],description:"Find winning candidate"},
  {id:575,title:"Distribute Candies",difficulty:"Easy",algorithms:["Array","Hash Table","Greedy","Set","Math"],correctAlgorithms:["Array","Hash Table","Greedy"],description:"Maximum candy types"},
  {id:576,title:"Out of Boundary Paths",difficulty:"Medium",algorithms:["Dynamic Programming","Matrix","Memoization","DFS","Modulo"],correctAlgorithms:["Dynamic Programming","Matrix"],description:"Count out of boundary paths"},
  {id:577,title:"Employee Bonus",difficulty:"Easy",algorithms:["Database","SQL","Left Join","Null Check","Filter"],correctAlgorithms:["Database"],description:"Find employees with bonus"},
  {id:578,title:"Get Highest Answer Rate Question",difficulty:"Medium",algorithms:["Database","SQL","Group By","Division","Rate"],correctAlgorithms:["Database"],description:"Question with highest answer rate"},
  {id:579,title:"Find Cumulative Salary",difficulty:"Hard",algorithms:["Database","SQL","Window Function","Self Join","Exclusion"],correctAlgorithms:["Database"],description:"Cumulative salary excluding max"},
  {id:580,title:"Count Student Number in Departments",difficulty:"Medium",algorithms:["Database","SQL","Left Join","Group By","Count"],correctAlgorithms:["Database"],description:"Student count per department"},
  {id:581,title:"Shortest Unsorted Continuous Subarray",difficulty:"Medium",algorithms:["Array","Two Pointers","Stack","Greedy","Sorting","Monotonic Stack"],correctAlgorithms:["Array","Two Pointers","Stack","Greedy","Sorting","Monotonic Stack"],description:"Shortest subarray to sort"},
  {id:582,title:"Kill Process",difficulty:"Medium",algorithms:["Array","Hash Table","Tree","DFS","BFS","Queue"],correctAlgorithms:["Array","Hash Table","Tree","DFS","BFS","Queue"],description:"Kill process tree"},
  {id:583,title:"Delete Operation for Two Strings",difficulty:"Medium",algorithms:["String","Dynamic Programming","LCS","Edit Distance","Memoization"],correctAlgorithms:["String","Dynamic Programming"],description:"Minimum deletions to match"},
  {id:584,title:"Find Customer Referee",difficulty:"Easy",algorithms:["Database","SQL","Null Check","Filter","Not Equal"],correctAlgorithms:["Database"],description:"Customers without referee 2"},
  {id:585,title:"Investments in 2016",difficulty:"Medium",algorithms:["Database","SQL","Window Function","Group By","Having"],correctAlgorithms:["Database"],description:"Calculate investment sum"},
  {id:586,title:"Customer Placing Largest Orders",difficulty:"Easy",algorithms:["Database","SQL","Group By","Order By","Limit"],correctAlgorithms:["Database"],description:"Customer with most orders"},
  {id:587,title:"Erect the Fence",difficulty:"Hard",algorithms:["Array","Math","Geometry","Convex Hull","Graham Scan"],correctAlgorithms:["Array","Math","Geometry"],description:"Find convex hull"},
  {id:588,title:"Design In-Memory File System",difficulty:"Hard",algorithms:["Hash Table","String","Design","Trie","Tree"],correctAlgorithms:["Hash Table","String","Design","Trie"],description:"Design file system"},
  {id:589,title:"N-ary Tree Preorder Traversal",difficulty:"Easy",algorithms:["Stack","Tree","DFS","N-ary Tree","Iteration"],correctAlgorithms:["Stack","Tree","DFS"],description:"Preorder of N-ary tree"},
  {id:590,title:"N-ary Tree Postorder Traversal",difficulty:"Easy",algorithms:["Stack","Tree","DFS","N-ary Tree","Iteration"],correctAlgorithms:["Stack","Tree","DFS"],description:"Postorder of N-ary tree"},
  {id:591,title:"Tag Validator",difficulty:"Hard",algorithms:["String","Stack","Validation","Parsing","State Machine"],correctAlgorithms:["String","Stack"],description:"Validate code tags"},
  {id:592,title:"Fraction Addition and Subtraction",difficulty:"Medium",algorithms:["Math","String","Simulation","GCD","LCM"],correctAlgorithms:["Math","String","Simulation"],description:"Add and subtract fractions"},
  {id:593,title:"Valid Square",difficulty:"Medium",algorithms:["Math","Geometry","Distance","Validation","Set"],correctAlgorithms:["Math","Geometry"],description:"Check if valid square"},
  {id:594,title:"Longest Harmonious Subsequence",difficulty:"Easy",algorithms:["Array","Hash Table","Sliding Window","Sorting","Counter"],correctAlgorithms:["Array","Hash Table","Sliding Window","Sorting"],description:"Longest harmonious subsequence"},
  {id:595,title:"Big Countries",difficulty:"Easy",algorithms:["Database","SQL","Filter","OR Condition","Basic Query"],correctAlgorithms:["Database"],description:"Find big countries"},
  {id:596,title:"Classes More Than 5 Students",difficulty:"Easy",algorithms:["Database","SQL","Group By","Having","Count"],correctAlgorithms:["Database"],description:"Classes with 5+ students"},
  {id:597,title:"Friend Requests I",difficulty:"Easy",algorithms:["Database","SQL","Aggregation","Division","Rate"],correctAlgorithms:["Database"],description:"Overall acceptance rate"},
  {id:598,title:"Range Addition II",difficulty:"Easy",algorithms:["Array","Math","Geometry","Intersection","Minimum"],correctAlgorithms:["Array","Math"],description:"Maximum count after operations"},
  {id:599,title:"Minimum Index Sum of Two Lists",difficulty:"Easy",algorithms:["Array","Hash Table","String","Intersection","Index Sum"],correctAlgorithms:["Array","Hash Table","String"],description:"Minimum index sum"},
  {id:600,title:"Non-negative Integers without Consecutive Ones",difficulty:"Hard",algorithms:["Dynamic Programming","Bit Manipulation","Fibonacci","Digit DP","Pattern"],correctAlgorithms:["Dynamic Programming","Bit Manipulation"],description:"Count without consecutive 1s"},

  // Problems 601-700
  {id:601,title:"Human Traffic of Stadium",difficulty:"Hard",algorithms:["Database","SQL","Window Function","Consecutive","Self Join"],correctAlgorithms:["Database"],description:"Find high traffic days"},
  {id:602,title:"Friend Requests II",difficulty:"Medium",algorithms:["Database","SQL","Union","Count","Most Friends"],correctAlgorithms:["Database"],description:"Who has most friends"},
  {id:603,title:"Consecutive Available Seats",difficulty:"Easy",algorithms:["Database","SQL","Self Join","Consecutive","Pattern"],correctAlgorithms:["Database"],description:"Find consecutive free seats"},
  {id:604,title:"Design Compressed String Iterator",difficulty:"Easy",algorithms:["Array","Hash Table","String","Design","Iterator"],correctAlgorithms:["Array","Hash Table","String","Design"],description:"Iterate compressed string"},
  {id:605,title:"Can Place Flowers",difficulty:"Easy",algorithms:["Array","Greedy","Simulation","Pattern","Spacing"],correctAlgorithms:["Array","Greedy"],description:"Can plant n flowers"},
  {id:606,title:"Construct String from Binary Tree",difficulty:"Easy",algorithms:["String","Tree","DFS","Binary Tree","Preorder"],correctAlgorithms:["String","Tree","DFS","Binary Tree"],description:"Tree to string with parentheses"},
  {id:607,title:"Sales Person",difficulty:"Easy",algorithms:["Database","SQL","Not In","Subquery","Join"],correctAlgorithms:["Database"],description:"Salesperson without RED sales"},
  {id:608,title:"Tree Node",difficulty:"Medium",algorithms:["Database","SQL","Case When","Self Join","Tree"],correctAlgorithms:["Database"],description:"Identify tree node types"},
  {id:609,title:"Find Duplicate File in System",difficulty:"Medium",algorithms:["Array","Hash Table","String","File System","Grouping"],correctAlgorithms:["Array","Hash Table","String"],description:"Find duplicate files"},
  {id:610,title:"Triangle Judgement",difficulty:"Easy",algorithms:["Database","SQL","Case When","Triangle Inequality","Math"],correctAlgorithms:["Database"],description:"Can form triangle"},
  {id:611,title:"Valid Triangle Number",difficulty:"Medium",algorithms:["Array","Two Pointers","Binary Search","Greedy","Sorting"],correctAlgorithms:["Array","Two Pointers","Binary Search","Greedy","Sorting"],description:"Count valid triangles"},
  {id:612,title:"Shortest Distance in a Plane",difficulty:"Medium",algorithms:["Database","SQL","Self Join","Distance","Min"],correctAlgorithms:["Database"],description:"Shortest point distance"},
  {id:613,title:"Shortest Distance in a Line",difficulty:"Easy",algorithms:["Database","SQL","Self Join","Abs","Min"],correctAlgorithms:["Database"],description:"Shortest distance on line"},
  {id:614,title:"Second Degree Follower",difficulty:"Medium",algorithms:["Database","SQL","Join","Group By","Having"],correctAlgorithms:["Database"],description:"Find second degree followers"},
  {id:615,title:"Average Salary by Department",difficulty:"Hard",algorithms:["Database","SQL","Window Function","Join","Comparison"],correctAlgorithms:["Database"],description:"Departments vs company average"},
  {id:616,title:"Add Bold Tag in String",difficulty:"Medium",algorithms:["Array","Hash Table","String","Trie","Interval Merge"],correctAlgorithms:["Array","Hash Table","String","Trie"],description:"Add bold tags"},
  {id:617,title:"Merge Two Binary Trees",difficulty:"Easy",algorithms:["Tree","DFS","Binary Tree","BFS","Recursion"],correctAlgorithms:["Tree","DFS","Binary Tree","BFS"],description:"Merge binary trees"},
  {id:618,title:"Students Report By Geography",difficulty:"Hard",algorithms:["Database","SQL","Pivot","Window Function","Row Number"],correctAlgorithms:["Database"],description:"Pivot students by continent"},
  {id:619,title:"Biggest Single Number",difficulty:"Easy",algorithms:["Database","SQL","Group By","Having","Max"],correctAlgorithms:["Database"],description:"Largest single number"},
  {id:620,title:"Not Boring Movies",difficulty:"Easy",algorithms:["Database","SQL","Filter","Mod","Order By"],correctAlgorithms:["Database"],description:"Find interesting movies"},
  {id:621,title:"Task Scheduler",difficulty:"Medium",algorithms:["Array","Hash Table","Greedy","Sorting","Heap","Queue"],correctAlgorithms:["Array","Hash Table","Greedy","Sorting","Heap","Queue"],description:"Minimum time for tasks"},
  {id:622,title:"Design Circular Queue",difficulty:"Medium",algorithms:["Array","Linked List","Design","Queue","Circular Buffer"],correctAlgorithms:["Array","Linked List","Design","Queue"],description:"Design circular queue"},
  {id:623,title:"Add One Row to Tree",difficulty:"Medium",algorithms:["Tree","DFS","BFS","Binary Tree","Level"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree"],description:"Add row at depth"},
  {id:624,title:"Maximum Distance in Arrays",difficulty:"Medium",algorithms:["Array","Greedy","Min/Max","Linear Scan","Optimization"],correctAlgorithms:["Array","Greedy"],description:"Maximum distance between arrays"},
  {id:625,title:"Minimum Factorization",difficulty:"Medium",algorithms:["Math","Greedy","Factorization","Digits","Pattern"],correctAlgorithms:["Math","Greedy"],description:"Minimum number from factors"},
  {id:626,title:"Exchange Seats",difficulty:"Medium",algorithms:["Database","SQL","Case When","Mod","Swap"],correctAlgorithms:["Database"],description:"Swap consecutive seats"},
  {id:627,title:"Swap Salary",difficulty:"Easy",algorithms:["Database","SQL","Update","Case When","XOR"],correctAlgorithms:["Database"],description:"Swap gender values"},
  {id:628,title:"Maximum Product of Three Numbers",difficulty:"Easy",algorithms:["Array","Math","Sorting","Greedy","Pattern"],correctAlgorithms:["Array","Math","Sorting"],description:"Maximum product of three"},
  {id:629,title:"K Inverse Pairs Array",difficulty:"Hard",algorithms:["Dynamic Programming","Math","Combinatorics","Prefix Sum","Optimization"],correctAlgorithms:["Dynamic Programming","Math"],description:"Count arrays with k inversions"},
  {id:630,title:"Course Schedule III",difficulty:"Hard",algorithms:["Array","Greedy","Heap","Sorting","Priority Queue"],correctAlgorithms:["Array","Greedy","Heap","Sorting"],description:"Maximum courses to take"},
  {id:631,title:"Design Excel Sum Formula",difficulty:"Hard",algorithms:["Graph","Design","Topological Sort","DFS","Spreadsheet"],correctAlgorithms:["Graph","Design","Topological Sort"],description:"Design Excel with formulas"},
  {id:632,title:"Smallest Range Covering K Lists",difficulty:"Hard",algorithms:["Array","Hash Table","Two Pointers","Sliding Window","Heap"],correctAlgorithms:["Array","Hash Table","Two Pointers","Sliding Window","Heap"],description:"Smallest range from k lists"},
  {id:633,title:"Sum of Square Numbers",difficulty:"Medium",algorithms:["Math","Two Pointers","Binary Search","Square Root","Pattern"],correctAlgorithms:["Math","Two Pointers","Binary Search"],description:"Sum of two squares"},
  {id:634,title:"Find Derangement",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Combinatorics","Derangement","Formula"],correctAlgorithms:["Math","Dynamic Programming"],description:"Count derangements"},
  {id:635,title:"Design Log Storage System",difficulty:"Medium",algorithms:["Hash Table","String","Design","TreeMap","Timestamp"],correctAlgorithms:["Hash Table","String","Design"],description:"Design log storage"},
  {id:636,title:"Exclusive Time of Functions",difficulty:"Medium",algorithms:["Array","Stack","Simulation","Time","Log Processing"],correctAlgorithms:["Array","Stack"],description:"Function exclusive time"},
  {id:637,title:"Average of Levels",difficulty:"Easy",algorithms:["Tree","DFS","BFS","Binary Tree","Level Average"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree"],description:"Average per tree level"},
  {id:638,title:"Shopping Offers",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Backtracking","Bit Manipulation","Memoization"],correctAlgorithms:["Array","Dynamic Programming","Backtracking","Bit Manipulation"],description:"Minimum price with offers"},
  {id:639,title:"Decode Ways II",difficulty:"Hard",algorithms:["String","Dynamic Programming","Modulo","State Machine","Pattern"],correctAlgorithms:["String","Dynamic Programming"],description:"Decode ways with wildcard"},
  {id:640,title:"Solve the Equation",difficulty:"Medium",algorithms:["Math","String","Simulation","Parsing","Algebra"],correctAlgorithms:["Math","String","Simulation"],description:"Solve linear equation"},
  {id:641,title:"Design Circular Deque",difficulty:"Medium",algorithms:["Array","Linked List","Design","Queue","Deque"],correctAlgorithms:["Array","Linked List","Design","Queue"],description:"Design circular deque"},
  {id:642,title:"Design Search Autocomplete",difficulty:"Hard",algorithms:["Array","String","Design","Trie","Heap"],correctAlgorithms:["Array","String","Design","Trie","Heap"],description:"Design autocomplete system"},
  {id:643,title:"Maximum Average Subarray I",difficulty:"Easy",algorithms:["Array","Sliding Window","Prefix Sum","Average","Fixed Window"],correctAlgorithms:["Array","Sliding Window"],description:"Maximum average of k elements"},
  {id:644,title:"Maximum Average Subarray II",difficulty:"Hard",algorithms:["Array","Binary Search","Sliding Window","Prefix Sum","Optimization"],correctAlgorithms:["Array","Binary Search","Sliding Window","Prefix Sum"],description:"Maximum average subarray"},
  {id:645,title:"Set Mismatch",difficulty:"Easy",algorithms:["Array","Hash Table","Math","Bit Manipulation","Cyclic Sort"],correctAlgorithms:["Array","Hash Table","Math","Bit Manipulation"],description:"Find duplicate and missing"},
  {id:646,title:"Maximum Length of Pair Chain",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Greedy","Sorting","LIS"],correctAlgorithms:["Array","Dynamic Programming","Greedy","Sorting"],description:"Longest chain of pairs"},
  {id:647,title:"Palindromic Substrings",difficulty:"Medium",algorithms:["String","Dynamic Programming","Expand Around Center","Manacher","Counting"],correctAlgorithms:["String","Dynamic Programming","Expand Around Center"],description:"Count palindromic substrings"},
  {id:648,title:"Replace Words",difficulty:"Medium",algorithms:["Array","Hash Table","String","Trie","Prefix"],correctAlgorithms:["Array","Hash Table","String","Trie"],description:"Replace with root words"},
  {id:649,title:"Dota2 Senate",difficulty:"Medium",algorithms:["String","Greedy","Queue","Simulation","Game"],correctAlgorithms:["String","Greedy","Queue"],description:"Predict Dota2 senate winner"},
  {id:650,title:"2 Keys Keyboard",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Prime Factorization","Greedy","Pattern"],correctAlgorithms:["Math","Dynamic Programming"],description:"Minimum steps for n A's"},
  {id:651,title:"4 Keys Keyboard",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Optimization","Pattern","State"],correctAlgorithms:["Math","Dynamic Programming"],description:"Maximum A's with 4 keys"},
  {id:652,title:"Find Duplicate Subtrees",difficulty:"Medium",algorithms:["Hash Table","Tree","DFS","Binary Tree","Serialization"],correctAlgorithms:["Hash Table","Tree","DFS","Binary Tree"],description:"Find duplicate subtrees"},
  {id:653,title:"Two Sum IV - Input is BST",difficulty:"Easy",algorithms:["Hash Table","Two Pointers","Tree","DFS","BFS","Binary Search Tree"],correctAlgorithms:["Hash Table","Two Pointers","Tree","DFS","BFS","Binary Search Tree"],description:"Two sum in BST"},
  {id:654,title:"Maximum Binary Tree",difficulty:"Medium",algorithms:["Array","Divide and Conquer","Stack","Tree","Monotonic Stack","Binary Tree"],correctAlgorithms:["Array","Divide and Conquer","Stack","Tree","Monotonic Stack","Binary Tree"],description:"Build maximum tree"},
  {id:655,title:"Print Binary Tree",difficulty:"Medium",algorithms:["Tree","DFS","BFS","Binary Tree","Matrix"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree"],description:"Print tree in matrix"},
  {id:656,title:"Coin Path",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Path Reconstruction","Optimization","Lexicographic"],correctAlgorithms:["Array","Dynamic Programming"],description:"Cheapest path with coins"},
  {id:657,title:"Robot Return to Origin",difficulty:"Easy",algorithms:["String","Simulation","Counting","Balance","Movement"],correctAlgorithms:["String","Simulation"],description:"Robot returns to origin"},
  {id:658,title:"Find K Closest Elements",difficulty:"Medium",algorithms:["Array","Two Pointers","Binary Search","Sliding Window","Heap","Sorting"],correctAlgorithms:["Array","Two Pointers","Binary Search","Sliding Window","Heap","Sorting"],description:"K closest elements"},
  {id:659,title:"Split Array into Consecutive Subsequences",difficulty:"Medium",algorithms:["Array","Hash Table","Greedy","Heap","Priority Queue"],correctAlgorithms:["Array","Hash Table","Greedy","Heap"],description:"Split into consecutive subsequences"},
  {id:660,title:"Remove 9",difficulty:"Hard",algorithms:["Math","Base Conversion","Pattern","Digit","Enumeration"],correctAlgorithms:["Math"],description:"Nth number without 9"},
  {id:661,title:"Image Smoother",difficulty:"Easy",algorithms:["Array","Matrix","Simulation","Average","Convolution"],correctAlgorithms:["Array","Matrix"],description:"Smooth image with average"},
  {id:662,title:"Maximum Width of Binary Tree",difficulty:"Medium",algorithms:["Tree","DFS","BFS","Binary Tree","Index"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree"],description:"Maximum tree width"},
  {id:663,title:"Equal Tree Partition",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Sum","Partition"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Split tree into equal sum"},
  {id:664,title:"Strange Printer",difficulty:"Hard",algorithms:["String","Dynamic Programming","Interval DP","Memoization","Optimization"],correctAlgorithms:["String","Dynamic Programming"],description:"Minimum turns to print"},
  {id:665,title:"Non-decreasing Array",difficulty:"Medium",algorithms:["Array","Greedy","Pattern","Modification","Validation"],correctAlgorithms:["Array","Greedy"],description:"Check if can be non-decreasing"},
  {id:666,title:"Path Sum IV",difficulty:"Medium",algorithms:["Array","Tree","DFS","Binary Tree","Encoding"],correctAlgorithms:["Array","Tree","DFS","Binary Tree"],description:"Path sum from array"},
  {id:667,title:"Beautiful Arrangement II",difficulty:"Medium",algorithms:["Array","Math","Construction","Pattern","Permutation"],correctAlgorithms:["Array","Math"],description:"Construct with k distinct differences"},
  {id:668,title:"Kth Smallest Number in Table",difficulty:"Hard",algorithms:["Binary Search","Math","Heap","Count","Multiplication Table"],correctAlgorithms:["Binary Search","Math","Heap"],description:"Kth smallest in multiplication table"},
  {id:669,title:"Trim a Binary Search Tree",difficulty:"Medium",algorithms:["Tree","DFS","Binary Search Tree","Binary Tree","Recursion"],correctAlgorithms:["Tree","DFS","Binary Search Tree","Binary Tree"],description:"Trim BST to range"},
  {id:670,title:"Maximum Swap",difficulty:"Medium",algorithms:["Math","Greedy","String","Swap","Digits"],correctAlgorithms:["Math","Greedy","String"],description:"Maximum number with one swap"},
  {id:671,title:"Second Minimum Node",difficulty:"Easy",algorithms:["Tree","DFS","Binary Tree","Min Heap","Special Tree"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Second minimum in special tree"},
  {id:672,title:"Bulb Switcher II",difficulty:"Medium",algorithms:["Math","Bit Manipulation","DFS","BFS","State"],correctAlgorithms:["Math","Bit Manipulation","DFS","BFS"],description:"Count light states"},
  {id:673,title:"Number of Longest Increasing Subsequence",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Binary Indexed Tree","Segment Tree","LIS"],correctAlgorithms:["Array","Dynamic Programming","Binary Indexed Tree","Segment Tree"],description:"Count longest increasing subsequences"},
  {id:674,title:"Longest Continuous Increasing Subsequence",difficulty:"Easy",algorithms:["Array","Sliding Window","Dynamic Programming","Greedy","Linear Scan"],correctAlgorithms:["Array","Sliding Window","Dynamic Programming","Greedy"],description:"Longest continuous increasing"},
  {id:675,title:"Cut Off Trees for Golf Event",difficulty:"Hard",algorithms:["Array","BFS","Heap","Matrix","Shortest Path"],correctAlgorithms:["Array","BFS","Heap","Matrix"],description:"Minimum steps to cut trees"},
  {id:676,title:"Implement Magic Dictionary",difficulty:"Medium",algorithms:["Hash Table","String","Design","Trie","Edit Distance"],correctAlgorithms:["Hash Table","String","Design","Trie"],description:"Design magic dictionary"},
  {id:677,title:"Map Sum Pairs",difficulty:"Medium",algorithms:["Hash Table","String","Design","Trie","Prefix"],correctAlgorithms:["Hash Table","String","Design","Trie"],description:"Map sum with prefix"},
  {id:678,title:"Valid Parenthesis String",difficulty:"Medium",algorithms:["String","Dynamic Programming","Stack","Greedy","Balance"],correctAlgorithms:["String","Dynamic Programming","Stack","Greedy"],description:"Valid parentheses with wildcard"},
  {id:679,title:"24 Game",difficulty:"Hard",algorithms:["Array","Math","Backtracking","DFS","Permutation"],correctAlgorithms:["Array","Math","Backtracking"],description:"Make 24 with 4 cards"},
  {id:680,title:"Valid Palindrome II",difficulty:"Easy",algorithms:["Two Pointers","String","Greedy","Palindrome","Deletion"],correctAlgorithms:["Two Pointers","String","Greedy"],description:"Palindrome with one deletion"},
  {id:681,title:"Next Closest Time",difficulty:"Medium",algorithms:["String","Enumeration","Simulation","Time","Brute Force"],correctAlgorithms:["String","Enumeration","Simulation"],description:"Next closest time"},
  {id:682,title:"Baseball Game",difficulty:"Easy",algorithms:["Array","Stack","Simulation","String","Operations"],correctAlgorithms:["Array","Stack","Simulation"],description:"Calculate baseball score"},
  {id:683,title:"K Empty Slots",difficulty:"Hard",algorithms:["Array","Binary Indexed Tree","Sliding Window","TreeSet","Ordered Set"],correctAlgorithms:["Array","Binary Indexed Tree","Sliding Window","Ordered Set"],description:"K empty slots between flowers"},
  {id:684,title:"Redundant Connection",difficulty:"Medium",algorithms:["DFS","BFS","Union Find","Graph","Tree"],correctAlgorithms:["DFS","BFS","Union Find","Graph","Tree"],description:"Find redundant edge"},
  {id:685,title:"Redundant Connection II",difficulty:"Hard",algorithms:["DFS","Union Find","Graph","Tree","Directed Graph"],correctAlgorithms:["DFS","Union Find","Graph","Tree"],description:"Redundant edge in directed tree"},
  {id:686,title:"Repeated String Match",difficulty:"Medium",algorithms:["String","String Matching","KMP","Rabin-Karp","Pattern"],correctAlgorithms:["String","String Matching"],description:"Minimum repeats to contain"},
  {id:687,title:"Longest Univalue Path",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Recursion","Path"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Longest path with same value"},
  {id:688,title:"Knight Probability in Chessboard",difficulty:"Medium",algorithms:["Dynamic Programming","Matrix","Memoization","Probability","DFS"],correctAlgorithms:["Dynamic Programming","Matrix"],description:"Knight remains on board probability"},
  {id:689,title:"Maximum Sum of 3 Non-Overlapping Subarrays",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Sliding Window","Prefix Sum","Optimization"],correctAlgorithms:["Array","Dynamic Programming","Sliding Window","Prefix Sum"],description:"Maximum sum of 3 subarrays"},
  {id:690,title:"Employee Importance",difficulty:"Medium",algorithms:["Hash Table","DFS","BFS","Tree","Graph"],correctAlgorithms:["Hash Table","DFS","BFS"],description:"Total employee importance"},
  {id:691,title:"Stickers to Spell Word",difficulty:"Hard",algorithms:["Dynamic Programming","Backtracking","Bit Manipulation","BFS","Memoization"],correctAlgorithms:["Dynamic Programming","Backtracking","Bit Manipulation","BFS"],description:"Minimum stickers for word"},
  {id:692,title:"Top K Frequent Words",difficulty:"Medium",algorithms:["Hash Table","String","Trie","Sorting","Heap","Bucket Sort"],correctAlgorithms:["Hash Table","String","Trie","Sorting","Heap","Bucket Sort"],description:"Top k frequent words"},
  {id:693,title:"Binary Number with Alternating Bits",difficulty:"Easy",algorithms:["Bit Manipulation","Pattern","XOR","Validation","Binary"],correctAlgorithms:["Bit Manipulation"],description:"Check alternating bits"},
  {id:694,title:"Number of Distinct Islands",difficulty:"Medium",algorithms:["Hash Table","DFS","BFS","Union Find","Normalization"],correctAlgorithms:["Hash Table","DFS","BFS","Union Find"],description:"Count unique island shapes"},
  {id:695,title:"Max Area of Island",difficulty:"Medium",algorithms:["Array","DFS","BFS","Union Find","Matrix"],correctAlgorithms:["Array","DFS","BFS","Union Find","Matrix"],description:"Maximum island area"},
  {id:696,title:"Count Binary Substrings",difficulty:"Easy",algorithms:["Two Pointers","String","Counting","Pattern","Groups"],correctAlgorithms:["Two Pointers","String"],description:"Count binary substrings"},
  {id:697,title:"Degree of an Array",difficulty:"Easy",algorithms:["Array","Hash Table","Counting","Degree","Subarray"],correctAlgorithms:["Array","Hash Table"],description:"Shortest subarray with degree"},
  {id:698,title:"Partition to K Equal Sum Subsets",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Backtracking","Memoization","Bit Manipulation"],correctAlgorithms:["Array","Dynamic Programming","Backtracking","Memoization","Bit Manipulation"],description:"Partition into k equal subsets"},
  {id:699,title:"Falling Squares",difficulty:"Hard",algorithms:["Array","Segment Tree","Ordered Map","Line Sweep","Interval"],correctAlgorithms:["Array","Segment Tree","Ordered Map"],description:"Heights after falling squares"},
  {id:700,title:"Search in a Binary Search Tree",difficulty:"Easy",algorithms:["Tree","Binary Search Tree","Binary Tree","Recursion","Iteration"],correctAlgorithms:["Tree","Binary Search Tree","Binary Tree"],description:"Search in BST"},

  // Problems 701-800
  {id:701,title:"Insert into Binary Search Tree",difficulty:"Medium",algorithms:["Tree","Binary Search Tree","Binary Tree","Recursion","Insertion"],correctAlgorithms:["Tree","Binary Search Tree","Binary Tree"],description:"Insert into BST"},
  {id:702,title:"Search in Sorted Array Unknown Size",difficulty:"Medium",algorithms:["Array","Binary Search","Interactive","Exponential Search","API"],correctAlgorithms:["Array","Binary Search","Interactive"],description:"Search with unknown size"},
  {id:703,title:"Kth Largest Element in Stream",difficulty:"Easy",algorithms:["Tree","Design","Binary Search Tree","Heap","Data Stream"],correctAlgorithms:["Tree","Design","Binary Search Tree","Heap","Data Stream"],description:"Kth largest in stream"},
  {id:704,title:"Binary Search",difficulty:"Easy",algorithms:["Array","Binary Search","Divide and Conquer","Search","Template"],correctAlgorithms:["Array","Binary Search"],description:"Classic binary search"},
  {id:705,title:"Design HashSet",difficulty:"Easy",algorithms:["Array","Hash Table","Linked List","Design","Hash Function"],correctAlgorithms:["Array","Hash Table","Linked List","Design"],description:"Design hash set"},
  {id:706,title:"Design HashMap",difficulty:"Easy",algorithms:["Array","Hash Table","Linked List","Design","Hash Function"],correctAlgorithms:["Array","Hash Table","Linked List","Design"],description:"Design hash map"},
  {id:707,title:"Design Linked List",difficulty:"Medium",algorithms:["Linked List","Design","Doubly Linked List","Implementation","Data Structure"],correctAlgorithms:["Linked List","Design"],description:"Design linked list"},
  {id:708,title:"Insert into Sorted Circular Linked List",difficulty:"Medium",algorithms:["Linked List","Circular List","Insertion","Edge Cases","Two Pointers"],correctAlgorithms:["Linked List"],description:"Insert into circular list"},
  {id:709,title:"To Lower Case",difficulty:"Easy",algorithms:["String","ASCII","Character","Transformation","Simple"],correctAlgorithms:["String"],description:"Convert to lowercase"},
  {id:710,title:"Random Pick with Blacklist",difficulty:"Hard",algorithms:["Hash Table","Math","Binary Search","Randomized","Remapping"],correctAlgorithms:["Hash Table","Math","Binary Search","Randomized"],description:"Random pick avoiding blacklist"},
  {id:711,title:"Number of Distinct Islands II",difficulty:"Hard",algorithms:["Hash Table","DFS","BFS","Normalization","Rotation"],correctAlgorithms:["Hash Table","DFS","BFS"],description:"Count distinct islands with rotation"},
  {id:712,title:"Minimum ASCII Delete Sum",difficulty:"Medium",algorithms:["String","Dynamic Programming","LCS","Edit Distance","ASCII"],correctAlgorithms:["String","Dynamic Programming"],description:"Minimum ASCII delete sum"},
  {id:713,title:"Subarray Product Less Than K",difficulty:"Medium",algorithms:["Array","Sliding Window","Two Pointers","Product","Counting"],correctAlgorithms:["Array","Sliding Window","Two Pointers"],description:"Count subarrays with product < k"},
  {id:714,title:"Best Time to Buy and Sell Stock with Fee",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Greedy","State Machine","Transaction Fee"],correctAlgorithms:["Array","Dynamic Programming","Greedy"],description:"Stock trading with fee"},
  {id:715,title:"Range Module",difficulty:"Hard",algorithms:["Design","Segment Tree","TreeMap","Interval","Binary Search"],correctAlgorithms:["Design","Segment Tree","Ordered Map"],description:"Design range module"},
  {id:716,title:"Max Stack",difficulty:"Hard",algorithms:["Stack","Design","Heap","TreeMap","Doubly Linked List"],correctAlgorithms:["Stack","Design","Heap","Ordered Map","Doubly Linked List"],description:"Design max stack"},
  {id:717,title:"1-bit and 2-bit Characters",difficulty:"Easy",algorithms:["Array","Greedy","Validation","Pattern","Binary"],correctAlgorithms:["Array","Greedy"],description:"Check if ends with 1-bit"},
  {id:718,title:"Maximum Length of Repeated Subarray",difficulty:"Medium",algorithms:["Array","Binary Search","Dynamic Programming","Sliding Window","Hash Table","Rolling Hash"],correctAlgorithms:["Array","Binary Search","Dynamic Programming","Sliding Window","Hash Table","Rolling Hash"],description:"Longest common subarray"},
  {id:719,title:"Find K-th Smallest Pair Distance",difficulty:"Hard",algorithms:["Array","Two Pointers","Binary Search","Sorting","Count"],correctAlgorithms:["Array","Two Pointers","Binary Search","Sorting"],description:"Kth smallest pair distance"},
  {id:720,title:"Longest Word in Dictionary",difficulty:"Medium",algorithms:["Array","Hash Table","String","Trie","Sorting"],correctAlgorithms:["Array","Hash Table","String","Trie","Sorting"],description:"Longest buildable word"},
  {id:721,title:"Accounts Merge",difficulty:"Medium",algorithms:["Array","Hash Table","String","DFS","BFS","Union Find"],correctAlgorithms:["Array","Hash Table","String","DFS","BFS","Union Find"],description:"Merge email accounts"},
  {id:722,title:"Remove Comments",difficulty:"Medium",algorithms:["Array","String","Simulation","State Machine","Parsing"],correctAlgorithms:["Array","String"],description:"Remove code comments"},
  {id:723,title:"Candy Crush",difficulty:"Medium",algorithms:["Array","Two Pointers","Matrix","Simulation","Game"],correctAlgorithms:["Array","Two Pointers","Matrix","Simulation"],description:"Simulate candy crush"},
  {id:724,title:"Find Pivot Index",difficulty:"Easy",algorithms:["Array","Prefix Sum","Balance","Linear Scan","Math"],correctAlgorithms:["Array","Prefix Sum"],description:"Find balance pivot"},
  {id:725,title:"Split Linked List in Parts",difficulty:"Medium",algorithms:["Linked List","Math","Division","Distribution","Two Pointers"],correctAlgorithms:["Linked List","Math"],description:"Split list into k parts"},
  {id:726,title:"Number of Atoms",difficulty:"Hard",algorithms:["Hash Table","String","Stack","Sorting","Parsing"],correctAlgorithms:["Hash Table","String","Stack","Sorting"],description:"Count atoms in formula"},
  {id:727,title:"Minimum Window Subsequence",difficulty:"Hard",algorithms:["String","Dynamic Programming","Sliding Window","Two Pointers","Subsequence"],correctAlgorithms:["String","Dynamic Programming","Sliding Window","Two Pointers"],description:"Minimum window for subsequence"},
  {id:728,title:"Self Dividing Numbers",difficulty:"Easy",algorithms:["Math","Enumeration","Division","Digits","Validation"],correctAlgorithms:["Math","Enumeration"],description:"Find self-dividing numbers"},
  {id:729,title:"My Calendar I",difficulty:"Medium",algorithms:["Array","Binary Search","Design","TreeMap","Interval"],correctAlgorithms:["Array","Binary Search","Design","Ordered Map"],description:"Book calendar events"},
  {id:730,title:"Count Different Palindromic Subsequences",difficulty:"Hard",algorithms:["String","Dynamic Programming","Memoization","Palindrome","Counting"],correctAlgorithms:["String","Dynamic Programming","Memoization"],description:"Count distinct palindromic subsequences"},
  {id:731,title:"My Calendar II",difficulty:"Medium",algorithms:["Array","Binary Search","Design","TreeMap","Interval"],correctAlgorithms:["Array","Binary Search","Design","Ordered Map"],description:"Calendar with double booking"},
  {id:732,title:"My Calendar III",difficulty:"Hard",algorithms:["Design","Segment Tree","TreeMap","Line Sweep","Interval"],correctAlgorithms:["Design","Segment Tree","Ordered Map","Line Sweep"],description:"Maximum k-booking"},
  {id:733,title:"Flood Fill",difficulty:"Easy",algorithms:["Array","DFS","BFS","Matrix","Connected Component"],correctAlgorithms:["Array","DFS","BFS","Matrix"],description:"Flood fill image"},
  {id:734,title:"Sentence Similarity",difficulty:"Easy",algorithms:["Array","Hash Table","String","Set","Similarity"],correctAlgorithms:["Array","Hash Table","String"],description:"Check sentence similarity"},
  {id:735,title:"Asteroid Collision",difficulty:"Medium",algorithms:["Array","Stack","Simulation","Collision","Pattern"],correctAlgorithms:["Array","Stack","Simulation"],description:"Simulate asteroid collisions"},
  {id:736,title:"Parse Lisp Expression",difficulty:"Hard",algorithms:["String","Stack","DFS","Recursion","Parsing"],correctAlgorithms:["String","Stack","DFS","Recursion"],description:"Evaluate Lisp expression"},
  {id:737,title:"Sentence Similarity II",difficulty:"Medium",algorithms:["Array","Hash Table","String","DFS","Union Find"],correctAlgorithms:["Array","Hash Table","String","DFS","Union Find"],description:"Transitive sentence similarity"},
  {id:738,title:"Monotone Increasing Digits",difficulty:"Medium",algorithms:["Math","Greedy","String","Digits","Pattern"],correctAlgorithms:["Math","Greedy","String"],description:"Largest monotone number"},
  {id:739,title:"Daily Temperatures",difficulty:"Medium",algorithms:["Array","Stack","Monotonic Stack","Next Greater","Temperature"],correctAlgorithms:["Array","Stack","Monotonic Stack"],description:"Days until warmer"},
  {id:740,title:"Delete and Earn",difficulty:"Medium",algorithms:["Array","Hash Table","Dynamic Programming","House Robber","Optimization"],correctAlgorithms:["Array","Hash Table","Dynamic Programming"],description:"Maximum points by deleting"},
  {id:741,title:"Cherry Pickup",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Matrix","Two Paths","Memoization"],correctAlgorithms:["Array","Dynamic Programming","Matrix"],description:"Maximum cherries collection"},
  {id:742,title:"Closest Leaf in Binary Tree",difficulty:"Medium",algorithms:["Tree","DFS","BFS","Binary Tree","Graph"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree","Graph"],description:"Find closest leaf"},
  {id:743,title:"Network Delay Time",difficulty:"Medium",algorithms:["DFS","BFS","Graph","Heap","Shortest Path"],correctAlgorithms:["DFS","BFS","Graph","Heap","Shortest Path"],description:"Time for signal propagation"},
  {id:744,title:"Find Smallest Letter Greater Than Target",difficulty:"Easy",algorithms:["Array","Binary Search","Circular","Wrap Around","Character"],correctAlgorithms:["Array","Binary Search"],description:"Next letter in circular array"},
  {id:745,title:"Prefix and Suffix Search",difficulty:"Hard",algorithms:["Hash Table","String","Design","Trie","WordFilter"],correctAlgorithms:["Hash Table","String","Design","Trie"],description:"Search by prefix and suffix"},
  {id:746,title:"Min Cost Climbing Stairs",difficulty:"Easy",algorithms:["Array","Dynamic Programming","Optimization","Cost","Stairs"],correctAlgorithms:["Array","Dynamic Programming"],description:"Minimum cost to climb"},
  {id:747,title:"Largest Number At Least Twice",difficulty:"Easy",algorithms:["Array","Sorting","Linear Scan","Maximum","Validation"],correctAlgorithms:["Array","Sorting"],description:"Dominant element index"},
  {id:748,title:"Shortest Completing Word",difficulty:"Easy",algorithms:["Array","Hash Table","String","Counting","Character Count"],correctAlgorithms:["Array","Hash Table","String"],description:"Shortest completing word"},
  {id:749,title:"Contain Virus",difficulty:"Hard",algorithms:["Array","DFS","BFS","Matrix","Simulation"],correctAlgorithms:["Array","DFS","BFS","Matrix","Simulation"],description:"Contain virus spread"},
  {id:750,title:"Number of Corner Rectangles",difficulty:"Medium",algorithms:["Array","Math","Dynamic Programming","Matrix","Counting"],correctAlgorithms:["Array","Math","Dynamic Programming","Matrix"],description:"Count corner rectangles"},
  {id:751,title:"IP to CIDR",difficulty:"Medium",algorithms:["String","Bit Manipulation","IP Address","CIDR","Network"],correctAlgorithms:["String","Bit Manipulation"],description:"Convert IP range to CIDR"},
  {id:752,title:"Open the Lock",difficulty:"Medium",algorithms:["Array","Hash Table","String","BFS","Shortest Path"],correctAlgorithms:["Array","Hash Table","String","BFS"],description:"Minimum moves to unlock"},
  {id:753,title:"Cracking the Safe",difficulty:"Hard",algorithms:["DFS","Graph","Eulerian Path","De Bruijn","String"],correctAlgorithms:["DFS","Graph","Eulerian Path"],description:"Crack safe combination"},
  {id:754,title:"Reach a Number",difficulty:"Medium",algorithms:["Math","Binary Search","Pattern","Sum","Target"],correctAlgorithms:["Math","Binary Search"],description:"Minimum moves to reach"},
  {id:755,title:"Pour Water",difficulty:"Medium",algorithms:["Array","Simulation","Physics","Water Flow","Pattern"],correctAlgorithms:["Array","Simulation"],description:"Simulate water pouring"},
  {id:756,title:"Pyramid Transition Matrix",difficulty:"Medium",algorithms:["DFS","BFS","Bit Manipulation","Memoization","Pyramid"],correctAlgorithms:["DFS","BFS","Bit Manipulation"],description:"Can build pyramid"},
  {id:757,title:"Set Intersection Size At Least Two",difficulty:"Hard",algorithms:["Array","Greedy","Sorting","Interval","Optimization"],correctAlgorithms:["Array","Greedy","Sorting"],description:"Minimum set covering intervals"},
  {id:758,title:"Bold Words in String",difficulty:"Medium",algorithms:["Array","Hash Table","String","Trie","Interval Merge"],correctAlgorithms:["Array","Hash Table","String","Trie"],description:"Bold words in string"},
  {id:759,title:"Employee Free Time",difficulty:"Hard",algorithms:["Array","Sorting","Heap","Line Sweep","Interval"],correctAlgorithms:["Array","Sorting","Heap","Line Sweep"],description:"Common free time"},
  {id:760,title:"Find Anagram Mappings",difficulty:"Easy",algorithms:["Array","Hash Table","Mapping","Index","Anagram"],correctAlgorithms:["Array","Hash Table"],description:"Anagram index mapping"},
  {id:761,title:"Special Binary String",difficulty:"Hard",algorithms:["String","Recursion","Sorting","Binary","Pattern"],correctAlgorithms:["String","Recursion","Sorting"],description:"Largest special binary string"},
  {id:762,title:"Prime Number of Set Bits",difficulty:"Easy",algorithms:["Math","Bit Manipulation","Prime","Counting","Pattern"],correctAlgorithms:["Math","Bit Manipulation"],description:"Prime set bits count"},
  {id:763,title:"Partition Labels",difficulty:"Medium",algorithms:["Hash Table","Two Pointers","String","Greedy","Partition"],correctAlgorithms:["Hash Table","Two Pointers","String","Greedy"],description:"Partition string into parts"},
  {id:764,title:"Largest Plus Sign",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Matrix","Preprocessing","Cross"],correctAlgorithms:["Array","Dynamic Programming","Matrix"],description:"Largest plus sign"},
  {id:765,title:"Couples Holding Hands",difficulty:"Hard",algorithms:["Greedy","Union Find","Graph","DFS","BFS","Depth-First Search","Breadth-First Search"],correctAlgorithms:["Greedy","Union Find","Graph","DFS","BFS","Depth-First Search","Breadth-First Search"],description:"Minimum swaps for couples"},
  {id:766,title:"Toeplitz Matrix",difficulty:"Easy",algorithms:["Array","Matrix","Diagonal","Validation","Pattern"],correctAlgorithms:["Array","Matrix"],description:"Check if Toeplitz matrix"},
  {id:767,title:"Reorganize String",difficulty:"Medium",algorithms:["Hash Table","String","Greedy","Sorting","Heap","Counting Sort"],correctAlgorithms:["Hash Table","String","Greedy","Sorting","Heap","Counting Sort"],description:"Reorganize string"},
  {id:768,title:"Max Chunks To Make Sorted II",difficulty:"Hard",algorithms:["Array","Stack","Greedy","Sorting","Monotonic Stack"],correctAlgorithms:["Array","Stack","Greedy","Sorting","Monotonic Stack"],description:"Maximum chunks to sort"},
  {id:769,title:"Max Chunks To Make Sorted",difficulty:"Medium",algorithms:["Array","Stack","Greedy","Sorting","Monotonic Stack"],correctAlgorithms:["Array","Stack","Greedy","Sorting","Monotonic Stack"],description:"Maximum chunks (permutation)"},
  {id:770,title:"Basic Calculator IV",difficulty:"Hard",algorithms:["Hash Table","Math","String","Stack","Recursion"],correctAlgorithms:["Hash Table","Math","String","Stack","Recursion"],description:"Evaluate expression with variables"},
  {id:771,title:"Jewels and Stones",difficulty:"Easy",algorithms:["Hash Table","String","Set","Counting","Character"],correctAlgorithms:["Hash Table","String"],description:"Count jewels in stones"},
  {id:772,title:"Basic Calculator III",difficulty:"Hard",algorithms:["Math","String","Stack","Recursion","Expression"],correctAlgorithms:["Math","String","Stack","Recursion"],description:"Calculator with all operations"},
  {id:773,title:"Sliding Puzzle",difficulty:"Hard",algorithms:["Array","BFS","Matrix","A*","Puzzle"],correctAlgorithms:["Array","BFS","Matrix"],description:"Solve sliding puzzle"},
  {id:774,title:"Minimize Max Distance to Gas Station",difficulty:"Hard",algorithms:["Array","Binary Search","Greedy","Optimization","Distance"],correctAlgorithms:["Array","Binary Search","Greedy"],description:"Minimize maximum distance"},
  {id:775,title:"Global and Local Inversions",difficulty:"Medium",algorithms:["Array","Math","Pattern","Inversion","Observation"],correctAlgorithms:["Array","Math"],description:"Equal global and local inversions"},
  {id:776,title:"Split BST",difficulty:"Medium",algorithms:["Tree","Binary Search Tree","Recursion","Split","Binary Tree"],correctAlgorithms:["Tree","Binary Search Tree","Recursion","Binary Tree"],description:"Split BST by value"},
  {id:777,title:"Swap Adjacent in LR String",difficulty:"Medium",algorithms:["Two Pointers","String","Transformation","Validation","Pattern"],correctAlgorithms:["Two Pointers","String"],description:"Can transform string"},
  {id:778,title:"Swim in Rising Water",difficulty:"Hard",algorithms:["Array","Binary Search","DFS","BFS","Union Find","Heap","Matrix"],correctAlgorithms:["Array","Binary Search","DFS","BFS","Union Find","Heap","Matrix"],description:"Minimum time to swim"},
  {id:779,title:"K-th Symbol in Grammar",difficulty:"Medium",algorithms:["Math","Bit Manipulation","Recursion","Binary Tree","Pattern"],correctAlgorithms:["Math","Bit Manipulation","Recursion"],description:"Find kth symbol"},
  {id:780,title:"Reaching Points",difficulty:"Hard",algorithms:["Math","Recursion","Reverse","GCD","Optimization"],correctAlgorithms:["Math","Recursion"],description:"Can reach target point"},
  {id:781,title:"Rabbits in Forest",difficulty:"Medium",algorithms:["Hash Table","Math","Greedy","Counting","Grouping"],correctAlgorithms:["Hash Table","Math","Greedy"],description:"Minimum rabbits in forest"},
  {id:782,title:"Transform to Chessboard",difficulty:"Hard",algorithms:["Array","Math","Matrix","Bit Manipulation","Pattern"],correctAlgorithms:["Array","Math","Matrix","Bit Manipulation"],description:"Minimum moves to chessboard"},
  {id:783,title:"Minimum Distance Between BST Nodes",difficulty:"Easy",algorithms:["Tree","DFS","Binary Search Tree","Binary Tree","Inorder"],correctAlgorithms:["Tree","DFS","Binary Search Tree","Binary Tree"],description:"Minimum difference in BST"},
  {id:784,title:"Letter Case Permutation",difficulty:"Medium",algorithms:["String","Backtracking","Bit Manipulation","BFS","DFS"],correctAlgorithms:["String","Backtracking","Bit Manipulation","BFS"],description:"All case permutations"},
  {id:785,title:"Is Graph Bipartite?",difficulty:"Medium",algorithms:["DFS","BFS","Union Find","Graph","Bipartite"],correctAlgorithms:["DFS","BFS","Union Find","Graph"],description:"Check if bipartite graph"},
  {id:786,title:"K-th Smallest Prime Fraction",difficulty:"Medium",algorithms:["Array","Two Pointers","Binary Search","Heap","Priority Queue"],correctAlgorithms:["Array","Two Pointers","Binary Search","Heap"],description:"Kth smallest fraction"},
  {id:787,title:"Cheapest Flights Within K Stops",difficulty:"Medium",algorithms:["Dynamic Programming","DFS","BFS","Graph","Heap","Shortest Path"],correctAlgorithms:["Dynamic Programming","DFS","BFS","Graph","Heap","Shortest Path"],description:"Cheapest flight with k stops"},
  {id:788,title:"Rotated Digits",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Digit DP","Counting","Pattern"],correctAlgorithms:["Math","Dynamic Programming"],description:"Count good rotated numbers"},
  {id:789,title:"Escape The Ghosts",difficulty:"Medium",algorithms:["Array","Math","Game","Manhattan Distance","Strategy"],correctAlgorithms:["Array","Math"],description:"Can escape ghosts"},
  {id:790,title:"Domino and Tromino Tiling",difficulty:"Medium",algorithms:["Dynamic Programming","Matrix Exponentiation","Pattern","Tiling","Recurrence"],correctAlgorithms:["Dynamic Programming"],description:"Ways to tile board"},
  {id:791,title:"Custom Sort String",difficulty:"Medium",algorithms:["Hash Table","String","Sorting","Custom Comparator","Counting"],correctAlgorithms:["Hash Table","String","Sorting"],description:"Sort by custom order"},
  {id:792,title:"Number of Matching Subsequences",difficulty:"Medium",algorithms:["Array","Hash Table","String","Trie","Binary Search"],correctAlgorithms:["Array","Hash Table","String","Trie","Binary Search"],description:"Count matching subsequences"},
  {id:793,title:"Preimage Size of Factorial Zeroes",difficulty:"Hard",algorithms:["Math","Binary Search","Number Theory","Factorial","Pattern"],correctAlgorithms:["Math","Binary Search"],description:"Count numbers with k trailing zeros"},
  {id:794,title:"Valid Tic-Tac-Toe State",difficulty:"Medium",algorithms:["Array","String","Game","Validation","State"],correctAlgorithms:["Array","String"],description:"Valid Tic-Tac-Toe state"},
  {id:795,title:"Number of Subarrays with Bounded Maximum",difficulty:"Medium",algorithms:["Array","Two Pointers","Sliding Window","Counting","Range"],correctAlgorithms:["Array","Two Pointers","Sliding Window"],description:"Subarrays with bounded max"},
  {id:796,title:"Rotate String",difficulty:"Easy",algorithms:["String","String Matching","KMP","Rotation","Pattern"],correctAlgorithms:["String","String Matching"],description:"Check if rotation"},
  {id:797,title:"All Paths From Source to Target",difficulty:"Medium",algorithms:["Backtracking","DFS","BFS","Graph","Dynamic Programming"],correctAlgorithms:["Backtracking","DFS","BFS","Graph","Dynamic Programming"],description:"All paths in DAG"},
  {id:798,title:"Smallest Rotation with Highest Score",difficulty:"Hard",algorithms:["Array","Prefix Sum","Line Sweep","Optimization","Rotation"],correctAlgorithms:["Array","Prefix Sum","Line Sweep"],description:"Best rotation for score"},
  {id:799,title:"Champagne Tower",difficulty:"Medium",algorithms:["Dynamic Programming","Simulation","Pascal Triangle","Physics","Pattern"],correctAlgorithms:["Dynamic Programming","Simulation"],description:"Champagne in glass"},
  {id:800,title:"Similar RGB Color",difficulty:"Easy",algorithms:["Math","String","Enumeration","Color","Rounding"],correctAlgorithms:["Math","String","Enumeration"],description:"Closest shorthand color"},

  // Problems 801-900
  {id:801,title:"Minimum Swaps To Make Sequences Increasing",difficulty:"Hard",algorithms:["Array","Dynamic Programming","State Machine","Swap","Optimization"],correctAlgorithms:["Array","Dynamic Programming","State Machine"],description:"Minimum swaps for increasing"},
  {id:802,title:"Find Eventual Safe States",difficulty:"Medium",algorithms:["DFS","BFS","Graph","Topological Sort","Cycle Detection"],correctAlgorithms:["DFS","BFS","Graph","Topological Sort"],description:"Find safe nodes"},
  {id:803,title:"Bricks Falling When Hit",difficulty:"Hard",algorithms:["Array","Union Find","Matrix","Simulation","Reverse"],correctAlgorithms:["Array","Union Find","Matrix"],description:"Bricks falling after hits"},
  {id:804,title:"Unique Morse Code Words",difficulty:"Easy",algorithms:["Array","Hash Table","String","Set","Morse Code"],correctAlgorithms:["Array","Hash Table","String"],description:"Unique Morse transformations"},
  {id:805,title:"Split Array With Same Average",difficulty:"Hard",algorithms:["Array","Math","Dynamic Programming","Meet in Middle","Subset"],correctAlgorithms:["Array","Math","Dynamic Programming","Meet in Middle"],description:"Split with same average"},
  {id:806,title:"Number of Lines To Write String",difficulty:"Easy",algorithms:["Array","String","Simulation","Line Wrapping","Width"],correctAlgorithms:["Array","String","Simulation"],description:"Lines to write string"},
  {id:807,title:"Max Increase to Keep City Skyline",difficulty:"Medium",algorithms:["Array","Greedy","Matrix","Row/Column Max","Optimization"],correctAlgorithms:["Array","Greedy","Matrix"],description:"Maximum increase for skyline"},
  {id:808,title:"Soup Servings",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Probability","Memoization","Expected Value"],correctAlgorithms:["Math","Dynamic Programming","Probability"],description:"Soup A probability"},
  {id:809,title:"Expressive Words",difficulty:"Medium",algorithms:["Array","Two Pointers","String","Stretchy","Validation"],correctAlgorithms:["Array","Two Pointers","String"],description:"Count stretchy words"},
  {id:810,title:"Chalkboard XOR Game",difficulty:"Hard",algorithms:["Array","Math","Bit Manipulation","Game Theory","Nim"],correctAlgorithms:["Array","Math","Bit Manipulation","Game Theory"],description:"XOR game winner"},
  {id:811,title:"Subdomain Visit Count",difficulty:"Medium",algorithms:["Array","Hash Table","String","Counting","Domain"],correctAlgorithms:["Array","Hash Table","String","Counting"],description:"Count subdomain visits"},
  {id:812,title:"Largest Triangle Area",difficulty:"Easy",algorithms:["Array","Math","Geometry","Brute Force","Area"],correctAlgorithms:["Array","Math","Geometry"],description:"Largest triangle area"},
  {id:813,title:"Largest Sum of Averages",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Prefix Sum","Partition","Average"],correctAlgorithms:["Array","Dynamic Programming","Prefix Sum"],description:"Maximum sum of averages"},
  {id:814,title:"Binary Tree Pruning",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Recursion","Pruning"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Remove subtrees without 1"},
  {id:815,title:"Bus Routes",difficulty:"Hard",algorithms:["Array","Hash Table","BFS","Graph","Shortest Path"],correctAlgorithms:["Array","Hash Table","BFS","Graph"],description:"Minimum buses to destination"},
  {id:816,title:"Ambiguous Coordinates",difficulty:"Medium",algorithms:["String","Backtracking","Enumeration","Parsing","Validation"],correctAlgorithms:["String","Backtracking","Enumeration"],description:"Generate ambiguous coordinates"},
  {id:817,title:"Linked List Components",difficulty:"Medium",algorithms:["Hash Table","Linked List","Set","Connected Component","Counting"],correctAlgorithms:["Hash Table","Linked List"],description:"Count connected components"},
  {id:818,title:"Race Car",difficulty:"Hard",algorithms:["Dynamic Programming","BFS","Memoization","Shortest Path","State"],correctAlgorithms:["Dynamic Programming","BFS","Memoization"],description:"Minimum instructions to target"},
  {id:819,title:"Most Common Word",difficulty:"Easy",algorithms:["Array","Hash Table","String","Counting","Parsing"],correctAlgorithms:["Array","Hash Table","String","Counting"],description:"Most common non-banned word"},
  {id:820,title:"Short Encoding of Words",difficulty:"Medium",algorithms:["Array","Hash Table","String","Trie","Suffix"],correctAlgorithms:["Array","Hash Table","String","Trie"],description:"Shortest encoding length"},
  {id:821,title:"Shortest Distance to a Character",difficulty:"Easy",algorithms:["Array","Two Pointers","String","BFS","Distance"],correctAlgorithms:["Array","Two Pointers","String","BFS"],description:"Distance to character"},
  {id:822,title:"Card Flipping Game",difficulty:"Medium",algorithms:["Array","Hash Table","Game","Strategy","Set"],correctAlgorithms:["Array","Hash Table"],description:"Minimum good integer"},
  {id:823,title:"Binary Trees With Factors",difficulty:"Medium",algorithms:["Array","Hash Table","Dynamic Programming","Sorting","Tree Count"],correctAlgorithms:["Array","Hash Table","Dynamic Programming","Sorting"],description:"Count factor trees"},
  {id:824,title:"Goat Latin",difficulty:"Easy",algorithms:["String","Simulation","Pattern","Transformation","Rules"],correctAlgorithms:["String","Simulation"],description:"Convert to Goat Latin"},
  {id:825,title:"Friends Of Appropriate Ages",difficulty:"Medium",algorithms:["Array","Two Pointers","Binary Search","Sorting","Counting"],correctAlgorithms:["Array","Two Pointers","Binary Search","Sorting"],description:"Friend request count"},
  {id:826,title:"Most Profit Assigning Work",difficulty:"Medium",algorithms:["Array","Two Pointers","Binary Search","Greedy","Sorting"],correctAlgorithms:["Array","Two Pointers","Binary Search","Greedy","Sorting"],description:"Maximum profit assignment"},
  {id:827,title:"Making A Large Island",difficulty:"Hard",algorithms:["Array","DFS","BFS","Union Find","Matrix"],correctAlgorithms:["Array","DFS","BFS","Union Find","Matrix"],description:"Largest island with one flip"},
  {id:828,title:"Count Unique Characters",difficulty:"Hard",algorithms:["Hash Table","String","Math","Dynamic Programming","Contribution"],correctAlgorithms:["Hash Table","String","Math","Dynamic Programming"],description:"Sum of unique characters"},
  {id:829,title:"Consecutive Numbers Sum",difficulty:"Hard",algorithms:["Math","Enumeration","Arithmetic Sequence","Factorization","Pattern"],correctAlgorithms:["Math","Enumeration"],description:"Ways to write as consecutive sum"},
  {id:830,title:"Positions of Large Groups",difficulty:"Easy",algorithms:["String","Two Pointers","Grouping","Counting","Range"],correctAlgorithms:["String","Two Pointers"],description:"Find large groups"},
  {id:831,title:"Masking Personal Information",difficulty:"Medium",algorithms:["String","Parsing","Pattern","Email","Phone"],correctAlgorithms:["String"],description:"Mask personal information"},
  {id:832,title:"Flipping an Image",difficulty:"Easy",algorithms:["Array","Two Pointers","Matrix","Bit Manipulation","Simulation"],correctAlgorithms:["Array","Two Pointers","Matrix","Bit Manipulation","Simulation"],description:"Flip and invert image"},
  {id:833,title:"Find And Replace in String",difficulty:"Medium",algorithms:["Array","Hash Table","String","Sorting","Replacement"],correctAlgorithms:["Array","Hash Table","String","Sorting"],description:"Replace substrings"},
  {id:834,title:"Sum of Distances in Tree",difficulty:"Hard",algorithms:["Dynamic Programming","Tree","DFS","Graph","Rerooting"],correctAlgorithms:["Dynamic Programming","Tree","DFS","Graph"],description:"Sum of all distances"},
  {id:835,title:"Image Overlap",difficulty:"Medium",algorithms:["Array","Matrix","Convolution","Translation","Brute Force"],correctAlgorithms:["Array","Matrix"],description:"Maximum image overlap"},
  {id:836,title:"Rectangle Overlap",difficulty:"Easy",algorithms:["Math","Geometry","Rectangle","Intersection","Validation"],correctAlgorithms:["Math","Geometry"],description:"Check rectangle overlap"},
  {id:837,title:"New 21 Game",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Sliding Window","Probability","Game"],correctAlgorithms:["Math","Dynamic Programming","Sliding Window","Probability"],description:"Probability of 21 game"},
  {id:838,title:"Push Dominoes",difficulty:"Medium",algorithms:["Two Pointers","String","Dynamic Programming","Simulation","Force"],correctAlgorithms:["Two Pointers","String","Dynamic Programming","Simulation"],description:"Final domino state"},
  {id:839,title:"Similar String Groups",difficulty:"Hard",algorithms:["Array","Hash Table","String","DFS","BFS","Union Find"],correctAlgorithms:["Array","Hash Table","String","DFS","BFS","Union Find"],description:"Count similar groups"},
  {id:840,title:"Magic Squares In Grid",difficulty:"Medium",algorithms:["Array","Hash Table","Math","Matrix","Validation"],correctAlgorithms:["Array","Hash Table","Math","Matrix"],description:"Count 3x3 magic squares"},
  {id:841,title:"Keys and Rooms",difficulty:"Medium",algorithms:["DFS","BFS","Graph","Set","Reachability"],correctAlgorithms:["DFS","BFS","Graph"],description:"Can visit all rooms"},
  {id:842,title:"Split Array into Fibonacci Sequence",difficulty:"Medium",algorithms:["String","Backtracking","Math","Validation","Fibonacci"],correctAlgorithms:["String","Backtracking","Math"],description:"Split into Fibonacci"},
  {id:843,title:"Guess the Word",difficulty:"Hard",algorithms:["Array","Math","String","Interactive","Game Theory","Minimax"],correctAlgorithms:["Array","Math","String","Interactive","Game Theory","Minimax"],description:"Guess secret word"},
  {id:844,title:"Backspace String Compare",difficulty:"Easy",algorithms:["Two Pointers","String","Stack","Simulation","Space Optimization"],correctAlgorithms:["Two Pointers","String","Stack","Simulation"],description:"Compare with backspaces"},
  {id:845,title:"Longest Mountain in Array",difficulty:"Medium",algorithms:["Array","Two Pointers","Dynamic Programming","Peak","Valley"],correctAlgorithms:["Array","Two Pointers","Dynamic Programming"],description:"Longest mountain subarray"},
  {id:846,title:"Hand of Straights",difficulty:"Medium",algorithms:["Array","Hash Table","Greedy","Sorting","Grouping"],correctAlgorithms:["Array","Hash Table","Greedy","Sorting"],description:"Divide into consecutive groups"},
  {id:847,title:"Shortest Path Visiting All Nodes",difficulty:"Hard",algorithms:["Dynamic Programming","Bit Manipulation","BFS","Graph","State Compression"],correctAlgorithms:["Dynamic Programming","Bit Manipulation","BFS","Graph"],description:"Shortest path visiting all"},
  {id:848,title:"Shifting Letters",difficulty:"Medium",algorithms:["Array","String","Prefix Sum","Modulo","Shifting"],correctAlgorithms:["Array","String","Prefix Sum"],description:"Shift letters by amounts"},
  {id:849,title:"Maximize Distance to Closest Person",difficulty:"Medium",algorithms:["Array","Two Pointers","Distance","Optimization","Seat"],correctAlgorithms:["Array","Two Pointers"],description:"Maximum distance to person"},
  {id:850,title:"Rectangle Area II",difficulty:"Hard",algorithms:["Array","Segment Tree","Line Sweep","Coordinate Compression","Union"],correctAlgorithms:["Array","Segment Tree","Line Sweep"],description:"Total area of rectangles"},
  {id:851,title:"Loud and Rich",difficulty:"Medium",algorithms:["Array","DFS","Graph","Topological Sort","Memoization"],correctAlgorithms:["Array","DFS","Graph","Topological Sort"],description:"Quietest richer person"},
  {id:852,title:"Peak Index in Mountain Array",difficulty:"Medium",algorithms:["Array","Binary Search","Golden Section Search","Ternary Search","Peak"],correctAlgorithms:["Array","Binary Search"],description:"Find peak in mountain"},
  {id:853,title:"Car Fleet",difficulty:"Medium",algorithms:["Array","Stack","Sorting","Monotonic Stack","Simulation"],correctAlgorithms:["Array","Stack","Sorting","Monotonic Stack"],description:"Number of car fleets"},
  {id:854,title:"K-Similar Strings",difficulty:"Hard",algorithms:["BFS","Graph","String","State Space","Shortest Path"],correctAlgorithms:["BFS","Graph","String"],description:"Minimum swaps for similarity"},
  {id:855,title:"Exam Room",difficulty:"Medium",algorithms:["Design","TreeSet","Heap","Interval","Priority Queue"],correctAlgorithms:["Design","Ordered Set","Heap"],description:"Design exam room"},
  {id:856,title:"Score of Parentheses",difficulty:"Medium",algorithms:["String","Stack","Recursion","Divide and Conquer","Pattern"],correctAlgorithms:["String","Stack","Recursion","Divide and Conquer"],description:"Calculate parentheses score"},
  {id:857,title:"Minimum Cost to Hire K Workers",difficulty:"Hard",algorithms:["Array","Greedy","Heap","Sorting","Ratio"],correctAlgorithms:["Array","Greedy","Heap","Sorting"],description:"Minimum cost to hire"},
  {id:858,title:"Mirror Reflection",difficulty:"Medium",algorithms:["Math","Number Theory","GCD","Reflection","Pattern"],correctAlgorithms:["Math","Number Theory"],description:"Which receptor receives ray"},
  {id:859,title:"Buddy Strings",difficulty:"Easy",algorithms:["Hash Table","String","Counting","Swap","Validation"],correctAlgorithms:["Hash Table","String"],description:"Can swap to match"},
  {id:860,title:"Lemonade Change",difficulty:"Easy",algorithms:["Array","Greedy","Simulation","Change Making","Counting"],correctAlgorithms:["Array","Greedy","Simulation"],description:"Can provide change"},
  {id:861,title:"Score After Flipping Matrix",difficulty:"Medium",algorithms:["Array","Greedy","Matrix","Bit Manipulation","Optimization"],correctAlgorithms:["Array","Greedy","Matrix","Bit Manipulation"],description:"Maximum score after flips"},
  {id:862,title:"Shortest Subarray with Sum at Least K",difficulty:"Hard",algorithms:["Array","Binary Search","Queue","Sliding Window","Heap","Prefix Sum","Monotonic Deque"],correctAlgorithms:["Array","Binary Search","Queue","Sliding Window","Heap","Prefix Sum","Monotonic Deque"],description:"Shortest subarray sum ≥ k"},
  {id:863,title:"All Nodes Distance K",difficulty:"Medium",algorithms:["Hash Table","Tree","DFS","BFS","Binary Tree"],correctAlgorithms:["Hash Table","Tree","DFS","BFS","Binary Tree"],description:"Nodes at distance k"},
  {id:864,title:"Shortest Path to Get All Keys",difficulty:"Hard",algorithms:["Bit Manipulation","BFS","Graph","State Compression","Shortest Path"],correctAlgorithms:["Bit Manipulation","BFS","Graph"],description:"Collect all keys shortest path"},
  {id:865,title:"Smallest Subtree with Deepest Nodes",difficulty:"Medium",algorithms:["Hash Table","Tree","DFS","Binary Tree","LCA"],correctAlgorithms:["Hash Table","Tree","DFS","Binary Tree"],description:"Subtree with deepest nodes"},
  {id:866,title:"Prime Palindrome",difficulty:"Medium",algorithms:["Math","Prime","Palindrome","Enumeration","Pattern"],correctAlgorithms:["Math"],description:"Find prime palindrome"},
  {id:867,title:"Transpose Matrix",difficulty:"Easy",algorithms:["Array","Matrix","Simulation","Transpose","2D Array"],correctAlgorithms:["Array","Matrix","Simulation"],description:"Transpose matrix"},
  {id:868,title:"Binary Gap",difficulty:"Easy",algorithms:["Math","Bit Manipulation","Binary","Distance","Pattern"],correctAlgorithms:["Math","Bit Manipulation"],description:"Longest distance between 1s"},
  {id:869,title:"Reordered Power of 2",difficulty:"Medium",algorithms:["Math","Sorting","Counting","Enumeration","Permutation"],correctAlgorithms:["Math","Sorting","Counting","Enumeration"],description:"Can reorder to power of 2"},
  {id:870,title:"Advantage Shuffle",difficulty:"Medium",algorithms:["Array","Two Pointers","Greedy","Sorting","Game"],correctAlgorithms:["Array","Two Pointers","Greedy","Sorting"],description:"Maximize advantage"},
  {id:871,title:"Minimum Number of Refueling Stops",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Greedy","Heap","Priority Queue"],correctAlgorithms:["Array","Dynamic Programming","Greedy","Heap"],description:"Minimum refueling stops"},
  {id:872,title:"Leaf-Similar Trees",difficulty:"Easy",algorithms:["Tree","DFS","Binary Tree","Leaf Sequence","Comparison"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Check leaf similarity"},
  {id:873,title:"Length of Longest Fibonacci Subsequence",difficulty:"Medium",algorithms:["Array","Hash Table","Dynamic Programming","Two Pointers","Fibonacci"],correctAlgorithms:["Array","Hash Table","Dynamic Programming","Two Pointers"],description:"Longest Fibonacci subsequence"},
  {id:874,title:"Walking Robot Simulation",difficulty:"Medium",algorithms:["Array","Hash Table","Simulation","Set","Direction"],correctAlgorithms:["Array","Hash Table","Simulation"],description:"Maximum distance squared"},
  {id:875,title:"Koko Eating Bananas",difficulty:"Medium",algorithms:["Array","Binary Search","Math","Optimization","Rate"],correctAlgorithms:["Array","Binary Search","Math"],description:"Minimum eating speed"},
  {id:876,title:"Middle of the Linked List",difficulty:"Easy",algorithms:["Linked List","Two Pointers","Fast & Slow","Middle","Tortoise & Hare"],correctAlgorithms:["Linked List","Two Pointers"],description:"Find middle node"},
  {id:877,title:"Stone Game",difficulty:"Medium",algorithms:["Array","Math","Dynamic Programming","Game Theory","Minimax"],correctAlgorithms:["Array","Math","Dynamic Programming","Game Theory","Minimax"],description:"Can Alice win"},
  {id:878,title:"Nth Magical Number",difficulty:"Hard",algorithms:["Math","Binary Search","Number Theory","LCM","GCD"],correctAlgorithms:["Math","Binary Search","Number Theory"],description:"Nth magical number"},
  {id:879,title:"Profitable Schemes",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Knapsack","3D DP","Counting"],correctAlgorithms:["Array","Dynamic Programming"],description:"Count profitable schemes"},
  {id:880,title:"Decoded String at Index",difficulty:"Medium",algorithms:["String","Stack","Math","Reverse","Pattern"],correctAlgorithms:["String","Stack","Math"],description:"Character at index"},
  {id:881,title:"Boats to Save People",difficulty:"Medium",algorithms:["Array","Two Pointers","Greedy","Sorting","Pairing"],correctAlgorithms:["Array","Two Pointers","Greedy","Sorting"],description:"Minimum boats needed"},
  {id:882,title:"Reachable Nodes In Subdivided Graph",difficulty:"Hard",algorithms:["Graph","Heap","Shortest Path","Dijkstra","Priority Queue"],correctAlgorithms:["Graph","Heap","Shortest Path"],description:"Count reachable nodes"},
  {id:883,title:"Projection Area of 3D Shapes",difficulty:"Easy",algorithms:["Array","Math","Matrix","Geometry","Projection"],correctAlgorithms:["Array","Math","Matrix","Geometry"],description:"Calculate projection area"},
  {id:884,title:"Uncommon Words from Two Sentences",difficulty:"Easy",algorithms:["Hash Table","String","Counting","Set","Words"],correctAlgorithms:["Hash Table","String","Counting"],description:"Find uncommon words"},
  {id:885,title:"Spiral Matrix III",difficulty:"Medium",algorithms:["Array","Matrix","Simulation","Spiral","Pattern"],correctAlgorithms:["Array","Matrix","Simulation"],description:"Spiral order from start"},
  {id:886,title:"Possible Bipartition",difficulty:"Medium",algorithms:["DFS","BFS","Union Find","Graph","Bipartite"],correctAlgorithms:["DFS","BFS","Union Find","Graph"],description:"Can split into two groups"},
  {id:887,title:"Super Egg Drop",difficulty:"Hard",algorithms:["Math","Binary Search","Dynamic Programming","Decision Tree","Optimization"],correctAlgorithms:["Math","Binary Search","Dynamic Programming"],description:"Minimum egg drop attempts"},
  {id:888,title:"Fair Candy Swap",difficulty:"Easy",algorithms:["Array","Hash Table","Math","Binary Search","Sum"],correctAlgorithms:["Array","Hash Table","Math","Binary Search"],description:"Fair candy exchange"},
  {id:889,title:"Construct Binary Tree from Preorder and Postorder",difficulty:"Medium",algorithms:["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"],correctAlgorithms:["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"],description:"Build tree from traversals"},
  {id:890,title:"Find and Replace Pattern",difficulty:"Medium",algorithms:["Array","Hash Table","String","Pattern Matching","Bijection"],correctAlgorithms:["Array","Hash Table","String"],description:"Match pattern words"},
  {id:891,title:"Sum of Subsequence Widths",difficulty:"Hard",algorithms:["Array","Math","Sorting","Combinatorics","Modular Arithmetic"],correctAlgorithms:["Array","Math","Sorting"],description:"Sum of width of subsequences"},
  {id:892,title:"Surface Area of 3D Shapes",difficulty:"Easy",algorithms:["Array","Math","Geometry","Matrix","3D"],correctAlgorithms:["Array","Math","Geometry","Matrix"],description:"Calculate 3D surface area"},
  {id:893,title:"Groups of Special-Equivalent Strings",difficulty:"Medium",algorithms:["Array","Hash Table","String","Sorting","Grouping"],correctAlgorithms:["Array","Hash Table","String","Sorting"],description:"Count equivalent groups"},
  {id:894,title:"All Possible Full Binary Trees",difficulty:"Medium",algorithms:["Dynamic Programming","Tree","Binary Tree","Recursion","Memoization"],correctAlgorithms:["Dynamic Programming","Tree","Binary Tree","Recursion","Memoization"],description:"Generate full binary trees"},
  {id:895,title:"Maximum Frequency Stack",difficulty:"Hard",algorithms:["Hash Table","Stack","Design","Heap","Frequency"],correctAlgorithms:["Hash Table","Stack","Design","Heap"],description:"Design frequency stack"},
  {id:896,title:"Monotonic Array",difficulty:"Easy",algorithms:["Array","Validation","Pattern","Linear Scan","Monotonic"],correctAlgorithms:["Array"],description:"Check if monotonic"},
  {id:897,title:"Increasing Order Search Tree",difficulty:"Easy",algorithms:["Stack","Tree","DFS","Binary Search Tree","Binary Tree"],correctAlgorithms:["Stack","Tree","DFS","Binary Search Tree","Binary Tree"],description:"Rearrange to increasing tree"},
  {id:898,title:"Bitwise ORs of Subarrays",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Bit Manipulation","Set","Subarray"],correctAlgorithms:["Array","Dynamic Programming","Bit Manipulation"],description:"Distinct OR values"},
  {id:899,title:"Orderly Queue",difficulty:"Hard",algorithms:["Math","String","Sorting","Rotation","Pattern"],correctAlgorithms:["Math","String","Sorting"],description:"Smallest string after operations"},
  {id:900,title:"RLE Iterator",difficulty:"Medium",algorithms:["Array","Design","Iterator","Simulation","Run Length"],correctAlgorithms:["Array","Design","Iterator","Simulation"],description:"Run-length encoded iterator"},

  // Problems 901-1000
  {id:901,title:"Online Stock Span",difficulty:"Medium",algorithms:["Stack","Design","Monotonic Stack","Data Stream","Span"],correctAlgorithms:["Stack","Design","Monotonic Stack","Data Stream"],description:"Calculate stock span"},
  {id:902,title:"Numbers At Most N Given Digit Set",difficulty:"Hard",algorithms:["Math","Binary Search","Dynamic Programming","Digit DP","Counting"],correctAlgorithms:["Math","Binary Search","Dynamic Programming"],description:"Count numbers from digit set"},
  {id:903,title:"Valid Permutations for DI Sequence",difficulty:"Hard",algorithms:["String","Dynamic Programming","Math","Permutation","Pattern"],correctAlgorithms:["String","Dynamic Programming","Math"],description:"Count valid permutations"},
  {id:904,title:"Fruit Into Baskets",difficulty:"Medium",algorithms:["Array","Hash Table","Sliding Window","Two Pointers","Fruit"],correctAlgorithms:["Array","Hash Table","Sliding Window","Two Pointers"],description:"Maximum fruits in baskets"},
  {id:905,title:"Sort Array By Parity",difficulty:"Easy",algorithms:["Array","Two Pointers","Sorting","Partition","Parity"],correctAlgorithms:["Array","Two Pointers","Sorting"],description:"Sort by even/odd"},
  {id:906,title:"Super Palindromes",difficulty:"Hard",algorithms:["Math","Enumeration","Palindrome","Square Root","Pattern"],correctAlgorithms:["Math","Enumeration"],description:"Count super palindromes"},
  {id:907,title:"Sum of Subarray Minimums",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Stack","Monotonic Stack","Contribution"],correctAlgorithms:["Array","Dynamic Programming","Stack","Monotonic Stack"],description:"Sum of all subarray minimums"},
  {id:908,title:"Smallest Range I",difficulty:"Easy",algorithms:["Array","Math","Greedy","Range","Min/Max"],correctAlgorithms:["Array","Math","Greedy"],description:"Minimize max difference"},
  {id:909,title:"Snakes and Ladders",difficulty:"Medium",algorithms:["Array","BFS","Matrix","Graph","Board Game"],correctAlgorithms:["Array","BFS","Matrix","Graph"],description:"Minimum moves in game"},
  {id:910,title:"Smallest Range II",difficulty:"Medium",algorithms:["Array","Math","Greedy","Sorting","Range"],correctAlgorithms:["Array","Math","Greedy","Sorting"],description:"Minimize max difference II"},
  {id:911,title:"Online Election",difficulty:"Medium",algorithms:["Array","Hash Table","Binary Search","Design","Voting"],correctAlgorithms:["Array","Hash Table","Binary Search","Design"],description:"Leader at time queries"},
  {id:912,title:"Sort an Array",difficulty:"Medium",algorithms:["Array","Divide and Conquer","Sorting","Heap","Merge Sort","Bucket Sort","Radix Sort","Counting Sort"],correctAlgorithms:["Array","Divide and Conquer","Sorting","Heap","Merge Sort","Bucket Sort","Radix Sort","Counting Sort"],description:"Sort array"},
  {id:913,title:"Cat and Mouse",difficulty:"Hard",algorithms:["Math","Dynamic Programming","Graph","Game Theory","Minimax"],correctAlgorithms:["Math","Dynamic Programming","Graph","Game Theory","Minimax"],description:"Cat and mouse game"},
  {id:914,title:"X of a Kind in Deck",difficulty:"Easy",algorithms:["Array","Hash Table","Math","Number Theory","GCD","Counting"],correctAlgorithms:["Array","Hash Table","Math","Number Theory","Counting"],description:"Partition into groups"},
  {id:915,title:"Partition Array into Disjoint Intervals",difficulty:"Medium",algorithms:["Array","Prefix/Suffix","Two Pass","Min/Max","Partition"],correctAlgorithms:["Array"],description:"Partition into two parts"},
  {id:916,title:"Word Subsets",difficulty:"Medium",algorithms:["Array","Hash Table","String","Counting","Universal"],correctAlgorithms:["Array","Hash Table","String"],description:"Find universal words"},
  {id:917,title:"Reverse Only Letters",difficulty:"Easy",algorithms:["Two Pointers","String","Reverse","Character","Pattern"],correctAlgorithms:["Two Pointers","String"],description:"Reverse only letters"},
  {id:918,title:"Maximum Sum Circular Subarray",difficulty:"Medium",algorithms:["Array","Divide and Conquer","Dynamic Programming","Queue","Kadane's Algorithm","Monotonic Deque"],correctAlgorithms:["Array","Divide and Conquer","Dynamic Programming","Queue","Monotonic Deque"],description:"Maximum circular subarray"},
  {id:919,title:"Complete Binary Tree Inserter",difficulty:"Medium",algorithms:["Tree","BFS","Design","Binary Tree","Complete Tree"],correctAlgorithms:["Tree","BFS","Design","Binary Tree"],description:"Insert into complete tree"},
  {id:920,title:"Number of Music Playlists",difficulty:"Hard",algorithms:["Math","Dynamic Programming","Combinatorics","Counting","Playlist"],correctAlgorithms:["Math","Dynamic Programming","Combinatorics"],description:"Count valid playlists"},
  {id:921,title:"Minimum Add to Make Valid",difficulty:"Medium",algorithms:["String","Stack","Greedy","Parentheses","Balance"],correctAlgorithms:["String","Stack","Greedy"],description:"Minimum parentheses to add"},
  {id:922,title:"Sort Array By Parity II",difficulty:"Easy",algorithms:["Array","Two Pointers","Sorting","Partition","Index Parity"],correctAlgorithms:["Array","Two Pointers","Sorting"],description:"Sort by index parity"},
  {id:923,title:"3Sum With Multiplicity",difficulty:"Medium",algorithms:["Array","Hash Table","Two Pointers","Sorting","Counting","Combinatorics"],correctAlgorithms:["Array","Hash Table","Two Pointers","Sorting","Counting"],description:"Count 3-sum with multiplicity"},
  {id:924,title:"Minimize Malware Spread",difficulty:"Hard",algorithms:["Array","DFS","BFS","Union Find","Graph","Matrix"],correctAlgorithms:["Array","DFS","BFS","Union Find","Graph","Matrix"],description:"Minimize infected nodes"},
  {id:925,title:"Long Pressed Name",difficulty:"Easy",algorithms:["Two Pointers","String","Validation","Typing","Pattern"],correctAlgorithms:["Two Pointers","String"],description:"Check long pressed"},
  {id:926,title:"Flip String to Monotone",difficulty:"Medium",algorithms:["Array","String","Dynamic Programming","Prefix Sum","Optimization"],correctAlgorithms:["Array","String","Dynamic Programming","Prefix Sum"],description:"Minimum flips for monotone"},
  {id:927,title:"Three Equal Parts",difficulty:"Hard",algorithms:["Array","Math","Binary","Pattern","Validation"],correctAlgorithms:["Array","Math"],description:"Split into three equal binary"},
  {id:928,title:"Minimize Malware Spread II",difficulty:"Hard",algorithms:["Array","DFS","BFS","Union Find","Graph","Matrix"],correctAlgorithms:["Array","DFS","BFS","Union Find","Graph","Matrix"],description:"Minimize spread removing one"},
  {id:929,title:"Unique Email Addresses",difficulty:"Easy",algorithms:["Array","Hash Table","String","Set","Email"],correctAlgorithms:["Array","Hash Table","String"],description:"Count unique emails"},
  {id:930,title:"Binary Subarrays With Sum",difficulty:"Medium",algorithms:["Array","Hash Table","Sliding Window","Prefix Sum","Two Pointers"],correctAlgorithms:["Array","Hash Table","Sliding Window","Prefix Sum","Two Pointers"],description:"Subarrays with target sum"},
  {id:931,title:"Minimum Falling Path Sum",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Matrix","Path","Optimization"],correctAlgorithms:["Array","Dynamic Programming","Matrix"],description:"Minimum falling path"},
  {id:932,title:"Beautiful Array",difficulty:"Medium",algorithms:["Array","Math","Divide and Conquer","Construction","Pattern"],correctAlgorithms:["Array","Math","Divide and Conquer"],description:"Construct beautiful array"},
  {id:933,title:"Number of Recent Calls",difficulty:"Easy",algorithms:["Design","Queue","Data Stream","Sliding Window","Deque"],correctAlgorithms:["Design","Queue","Data Stream"],description:"Count recent calls"},
  {id:934,title:"Shortest Bridge",difficulty:"Medium",algorithms:["Array","DFS","BFS","Matrix","Multi-source BFS"],correctAlgorithms:["Array","DFS","BFS","Matrix"],description:"Shortest bridge between islands"},
  {id:935,title:"Knight Dialer",difficulty:"Medium",algorithms:["Dynamic Programming","Graph","Matrix Exponentiation","State Machine","Knight"],correctAlgorithms:["Dynamic Programming","Graph"],description:"Knight dialer numbers"},
  {id:936,title:"Stamping The Sequence",difficulty:"Hard",algorithms:["String","Stack","Greedy","Queue","Reverse"],correctAlgorithms:["String","Stack","Greedy","Queue"],description:"Stamp to target sequence"},
  {id:937,title:"Reorder Data in Log Files",difficulty:"Medium",algorithms:["Array","String","Sorting","Custom Sort","Log"],correctAlgorithms:["Array","String","Sorting"],description:"Reorder log files"},
  {id:938,title:"Range Sum of BST",difficulty:"Easy",algorithms:["Tree","DFS","BFS","Binary Search Tree","Binary Tree"],correctAlgorithms:["Tree","DFS","BFS","Binary Search Tree","Binary Tree"],description:"Sum in range"},
  {id:939,title:"Minimum Area Rectangle",difficulty:"Medium",algorithms:["Array","Hash Table","Math","Geometry","Sorting"],correctAlgorithms:["Array","Hash Table","Math","Geometry","Sorting"],description:"Minimum rectangle area"},
  {id:940,title:"Distinct Subsequences II",difficulty:"Hard",algorithms:["String","Dynamic Programming","Counting","Subsequence","Modulo"],correctAlgorithms:["String","Dynamic Programming"],description:"Count distinct subsequences"},
  {id:941,title:"Valid Mountain Array",difficulty:"Easy",algorithms:["Array","Two Pointers","Validation","Peak","Mountain"],correctAlgorithms:["Array","Two Pointers"],description:"Check if mountain array"},
  {id:942,title:"DI String Match",difficulty:"Easy",algorithms:["Array","Math","Two Pointers","String","Greedy"],correctAlgorithms:["Array","Math","Two Pointers","String","Greedy"],description:"Match DI string"},
  {id:943,title:"Find Shortest Superstring",difficulty:"Hard",algorithms:["Array","String","Dynamic Programming","Bit Manipulation","TSP"],correctAlgorithms:["Array","String","Dynamic Programming","Bit Manipulation"],description:"Shortest superstring"},
  {id:944,title:"Delete Columns to Make Sorted",difficulty:"Easy",algorithms:["Array","String","Greedy","Column","Sorting"],correctAlgorithms:["Array","String","Greedy"],description:"Delete unsorted columns"},
  {id:945,title:"Minimum Increment to Make Unique",difficulty:"Medium",algorithms:["Array","Greedy","Sorting","Counting","Hash Table"],correctAlgorithms:["Array","Greedy","Sorting","Counting"],description:"Minimum moves for unique"},
  {id:946,title:"Validate Stack Sequences",difficulty:"Medium",algorithms:["Array","Stack","Greedy","Simulation","Validation"],correctAlgorithms:["Array","Stack","Greedy","Simulation"],description:"Validate push/pop sequence"},
  {id:947,title:"Most Stones Removed",difficulty:"Medium",algorithms:["Hash Table","DFS","Union Find","Graph","Connected Component"],correctAlgorithms:["Hash Table","DFS","Union Find","Graph"],description:"Maximum stones removed"},
  {id:948,title:"Bag of Tokens",difficulty:"Medium",algorithms:["Array","Two Pointers","Greedy","Sorting","Game"],correctAlgorithms:["Array","Two Pointers","Greedy","Sorting"],description:"Maximum score with tokens"},
  {id:949,title:"Largest Time for Given Digits",difficulty:"Medium",algorithms:["Array","String","Enumeration","Permutation","Time"],correctAlgorithms:["Array","String","Enumeration"],description:"Largest valid time"},
  {id:950,title:"Reveal Cards In Increasing Order",difficulty:"Medium",algorithms:["Array","Queue","Sorting","Simulation","Deque"],correctAlgorithms:["Array","Queue","Sorting","Simulation"],description:"Order for revealing"},
  {id:951,title:"Flip Equivalent Binary Trees",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Recursion","Equivalence"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Check flip equivalence"},
  {id:952,title:"Largest Component Size by Factor",difficulty:"Hard",algorithms:["Array","Math","Union Find","Hash Table","Prime Factorization"],correctAlgorithms:["Array","Math","Union Find","Hash Table"],description:"Largest component by factors"},
  {id:953,title:"Verifying Alien Dictionary",difficulty:"Easy",algorithms:["Array","Hash Table","String","Sorting","Order"],correctAlgorithms:["Array","Hash Table","String"],description:"Verify alien dictionary order"},
  {id:954,title:"Array of Doubled Pairs",difficulty:"Medium",algorithms:["Array","Hash Table","Greedy","Sorting","Pairing"],correctAlgorithms:["Array","Hash Table","Greedy","Sorting"],description:"Can reorder as doubled pairs"},
  {id:955,title:"Delete Columns to Make Sorted II",difficulty:"Medium",algorithms:["Array","String","Greedy","Column","Lexicographic"],correctAlgorithms:["Array","String","Greedy"],description:"Delete for lexicographic order"},
  {id:956,title:"Tallest Billboard",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Meet in Middle","Subset Sum","Optimization"],correctAlgorithms:["Array","Dynamic Programming","Meet in Middle"],description:"Tallest equal billboards"},
  {id:957,title:"Prison Cells After N Days",difficulty:"Medium",algorithms:["Array","Hash Table","Math","Bit Manipulation","Cycle"],correctAlgorithms:["Array","Hash Table","Math","Bit Manipulation"],description:"Prison state after N days"},
  {id:958,title:"Check Completeness of Binary Tree",difficulty:"Medium",algorithms:["Tree","BFS","Binary Tree","Complete Tree","Validation"],correctAlgorithms:["Tree","BFS","Binary Tree"],description:"Check if complete tree"},
  {id:959,title:"Regions Cut By Slashes",difficulty:"Medium",algorithms:["Hash Table","DFS","BFS","Union Find","Graph"],correctAlgorithms:["Hash Table","DFS","BFS","Union Find","Graph"],description:"Count regions"},
  {id:960,title:"Delete Columns to Make Sorted III",difficulty:"Hard",algorithms:["Array","String","Dynamic Programming","LIS","Column"],correctAlgorithms:["Array","String","Dynamic Programming"],description:"Minimum deletions for sorted"},
  {id:961,title:"N-Repeated Element",difficulty:"Easy",algorithms:["Array","Hash Table","Math","Pigeonhole","Pattern"],correctAlgorithms:["Array","Hash Table","Math"],description:"Find N-repeated element"},
  {id:962,title:"Maximum Width Ramp",difficulty:"Medium",algorithms:["Array","Stack","Monotonic Stack","Two Pointers","Binary Search"],correctAlgorithms:["Array","Stack","Monotonic Stack","Two Pointers","Binary Search"],description:"Maximum width ramp"},
  {id:963,title:"Minimum Area Rectangle II",difficulty:"Medium",algorithms:["Array","Math","Geometry","Hash Table","Rectangle"],correctAlgorithms:["Array","Math","Geometry","Hash Table"],description:"Minimum area any angle"},
  {id:964,title:"Least Operators to Express Number",difficulty:"Hard",algorithms:["Math","Dynamic Programming","Memoization","BFS","Expression"],correctAlgorithms:["Math","Dynamic Programming","Memoization","BFS"],description:"Minimum operators for target"},
  {id:965,title:"Univalued Binary Tree",difficulty:"Easy",algorithms:["Tree","DFS","BFS","Binary Tree","Validation"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree"],description:"Check if univalued"},
  {id:966,title:"Vowel Spellchecker",difficulty:"Medium",algorithms:["Array","Hash Table","String","Pattern","Case"],correctAlgorithms:["Array","Hash Table","String"],description:"Spell checker with rules"},
  {id:967,title:"Numbers With Same Consecutive Differences",difficulty:"Medium",algorithms:["BFS","DFS","Backtracking","Enumeration","Digit"],correctAlgorithms:["BFS","DFS","Backtracking"],description:"Numbers with k difference"},
  {id:968,title:"Binary Tree Cameras",difficulty:"Hard",algorithms:["Dynamic Programming","Tree","DFS","Binary Tree","Greedy"],correctAlgorithms:["Dynamic Programming","Tree","DFS","Binary Tree","Greedy"],description:"Minimum cameras needed"},
  {id:969,title:"Pancake Sorting",difficulty:"Medium",algorithms:["Array","Two Pointers","Greedy","Sorting","Simulation"],correctAlgorithms:["Array","Two Pointers","Greedy","Sorting"],description:"Sort with pancake flips"},
  {id:970,title:"Powerful Integers",difficulty:"Medium",algorithms:["Hash Table","Math","Set","Enumeration","Power"],correctAlgorithms:["Hash Table","Math"],description:"Find powerful integers"},
  {id:971,title:"Flip Binary Tree To Match",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Stack","Preorder"],correctAlgorithms:["Tree","DFS","Binary Tree","Stack"],description:"Flip to match preorder"},
  {id:972,title:"Equal Rational Numbers",difficulty:"Hard",algorithms:["Math","String","Fraction","Decimal","Pattern"],correctAlgorithms:["Math","String"],description:"Compare rational numbers"},
  {id:973,title:"K Closest Points to Origin",difficulty:"Medium",algorithms:["Array","Math","Divide and Conquer","Sorting","Heap","Quickselect","Geometry"],correctAlgorithms:["Array","Math","Divide and Conquer","Sorting","Heap","Quickselect","Geometry"],description:"K closest to origin"},
  {id:974,title:"Subarray Sums Divisible by K",difficulty:"Medium",algorithms:["Array","Hash Table","Math","Prefix Sum","Modulo"],correctAlgorithms:["Array","Hash Table","Math","Prefix Sum"],description:"Subarrays divisible by k"},
  {id:975,title:"Odd Even Jump",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Stack","Monotonic Stack","TreeMap"],correctAlgorithms:["Array","Dynamic Programming","Stack","Monotonic Stack","Ordered Map"],description:"Count good starting indices"},
  {id:976,title:"Largest Perimeter Triangle",difficulty:"Easy",algorithms:["Array","Math","Greedy","Sorting","Geometry"],correctAlgorithms:["Array","Math","Greedy","Sorting"],description:"Largest triangle perimeter"},
  {id:977,title:"Squares of Sorted Array",difficulty:"Easy",algorithms:["Array","Two Pointers","Sorting","Merge","Absolute"],correctAlgorithms:["Array","Two Pointers","Sorting"],description:"Sorted squares"},
  {id:978,title:"Longest Turbulent Subarray",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Sliding Window","Two Pointers","Pattern"],correctAlgorithms:["Array","Dynamic Programming","Sliding Window","Two Pointers"],description:"Longest turbulent subarray"},
  {id:979,title:"Distribute Coins in Binary Tree",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Post-order","Balance"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Minimum moves for coins"},
  {id:980,title:"Unique Paths III",difficulty:"Hard",algorithms:["Array","Backtracking","Bit Manipulation","Matrix","DFS"],correctAlgorithms:["Array","Backtracking","Bit Manipulation","Matrix"],description:"Paths visiting all squares"},
  {id:981,title:"Time Based Key-Value Store",difficulty:"Medium",algorithms:["Hash Table","String","Binary Search","Design","TreeMap"],correctAlgorithms:["Hash Table","String","Binary Search","Design"],description:"Time-based key-value store"},
  {id:982,title:"Triples with Bitwise AND Equal To Zero",difficulty:"Hard",algorithms:["Array","Hash Table","Bit Manipulation","Meet in Middle","Optimization"],correctAlgorithms:["Array","Hash Table","Bit Manipulation"],description:"Count AND-zero triples"},
  {id:983,title:"Minimum Cost For Tickets",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Sliding Window","Optimization","Calendar"],correctAlgorithms:["Array","Dynamic Programming","Sliding Window"],description:"Minimum cost for travel"},
  {id:984,title:"String Without AAA or BBB",difficulty:"Medium",algorithms:["String","Greedy","Construction","Pattern","Balance"],correctAlgorithms:["String","Greedy"],description:"String without AAA/BBB"},
  {id:985,title:"Sum of Even Numbers After Queries",difficulty:"Medium",algorithms:["Array","Math","Simulation","Query","Even/Odd"],correctAlgorithms:["Array","Math","Simulation"],description:"Sum after queries"},
  {id:986,title:"Interval List Intersections",difficulty:"Medium",algorithms:["Array","Two Pointers","Interval","Merge","Intersection"],correctAlgorithms:["Array","Two Pointers"],description:"Interval intersections"},
  {id:987,title:"Vertical Order Traversal",difficulty:"Hard",algorithms:["Hash Table","Tree","DFS","BFS","Binary Tree","Sorting"],correctAlgorithms:["Hash Table","Tree","DFS","BFS","Binary Tree","Sorting"],description:"Vertical traversal with sorting"},
  {id:988,title:"Smallest String Starting From Leaf",difficulty:"Medium",algorithms:["String","Tree","DFS","Binary Tree","Path"],correctAlgorithms:["String","Tree","DFS","Binary Tree"],description:"Smallest leaf to root string"},
  {id:989,title:"Add to Array-Form",difficulty:"Easy",algorithms:["Array","Math","Carry","Addition","Big Integer"],correctAlgorithms:["Array","Math"],description:"Add integer to array"},
  {id:990,title:"Satisfiability of Equality Equations",difficulty:"Medium",algorithms:["Array","Graph","String","Union Find","DFS"],correctAlgorithms:["Array","Graph","String","Union Find","DFS"],description:"Check equation satisfiability"},
  {id:991,title:"Broken Calculator",difficulty:"Medium",algorithms:["Math","Greedy","BFS","Reverse","Optimization"],correctAlgorithms:["Math","Greedy","BFS"],description:"Minimum operations to target"},
  {id:992,title:"Subarrays with K Different Integers",difficulty:"Hard",algorithms:["Array","Hash Table","Sliding Window","Two Pointers","Counting"],correctAlgorithms:["Array","Hash Table","Sliding Window","Two Pointers","Counting"],description:"Subarrays with k distinct"},
  {id:993,title:"Cousins in Binary Tree",difficulty:"Easy",algorithms:["Tree","DFS","BFS","Binary Tree","Level"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree"],description:"Check if cousins"},
  {id:994,title:"Rotting Oranges",difficulty:"Medium",algorithms:["Array","BFS","Matrix","Multi-source BFS","Time"],correctAlgorithms:["Array","BFS","Matrix"],description:"Time to rot all"},
  {id:995,title:"Minimum Number of K Consecutive Bit Flips",difficulty:"Hard",algorithms:["Array","Bit Manipulation","Queue","Sliding Window","Greedy","Prefix Sum"],correctAlgorithms:["Array","Bit Manipulation","Queue","Sliding Window","Greedy","Prefix Sum"],description:"Minimum k-bit flips"},
  {id:996,title:"Number of Squareful Arrays",difficulty:"Hard",algorithms:["Array","Math","Dynamic Programming","Backtracking","Bit Manipulation"],correctAlgorithms:["Array","Math","Dynamic Programming","Backtracking","Bit Manipulation"],description:"Count squareful permutations"},
  {id:997,title:"Find the Town Judge",difficulty:"Easy",algorithms:["Array","Hash Table","Graph","In/Out Degree","Trust"],correctAlgorithms:["Array","Hash Table","Graph"],description:"Find town judge"},
  {id:998,title:"Maximum Binary Tree II",difficulty:"Medium",algorithms:["Tree","Binary Tree","Recursion","Construction","Insert"],correctAlgorithms:["Tree","Binary Tree"],description:"Insert into maximum tree"},
  {id:999,title:"Available Captures for Rook",difficulty:"Easy",algorithms:["Array","Matrix","Simulation","Chess","Direction"],correctAlgorithms:["Array","Matrix","Simulation"],description:"Rook captures count"},
  {id:1000,title:"Minimum Cost to Merge Stones",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Math","Interval DP","Prefix Sum"],correctAlgorithms:["Array","Dynamic Programming","Math","Prefix Sum"],description:"Minimum cost merging stones"}
];