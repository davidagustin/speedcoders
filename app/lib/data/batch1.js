// LeetCode Problems 1-500
export const batch1Problems = [
  // Problems 1-50 (already have some, adding missing ones)
  {id:6,title:"Zigzag Conversion",difficulty:"Medium",algorithms:["String","Simulation","Math","Pattern","Array"],correctAlgorithms:["String"],description:"Convert string to zigzag pattern"},
  {id:7,title:"Reverse Integer",difficulty:"Medium",algorithms:["Math","String","Overflow Check","Modulo","Division"],correctAlgorithms:["Math"],description:"Reverse digits of integer"},
  {id:8,title:"String to Integer (atoi)",difficulty:"Medium",algorithms:["String","Math","State Machine","Parsing","Edge Cases"],correctAlgorithms:["String","Math"],description:"Implement atoi function"},
  {id:9,title:"Palindrome Number",difficulty:"Easy",algorithms:["Math","String","Two Pointers","Reverse","Modulo"],correctAlgorithms:["Math"],description:"Check if integer is palindrome"},
  {id:10,title:"Regular Expression Matching",difficulty:"Hard",algorithms:["String","Dynamic Programming","Recursion","Backtracking","State Machine"],correctAlgorithms:["String","Dynamic Programming","Recursion"],description:"Implement regex matching"},
  {id:12,title:"Integer to Roman",difficulty:"Medium",algorithms:["Hash Table","Math","String","Greedy","Lookup Table"],correctAlgorithms:["Hash Table","Math","String"],description:"Convert integer to Roman numeral"},
  {id:13,title:"Roman to Integer",difficulty:"Easy",algorithms:["Hash Table","Math","String","Parsing","Lookup"],correctAlgorithms:["Hash Table","Math","String"],description:"Convert Roman numeral to integer"},
  {id:14,title:"Longest Common Prefix",difficulty:"Easy",algorithms:["String","Trie","Binary Search","Vertical Scanning","Horizontal Scanning"],correctAlgorithms:["String","Trie"],description:"Find longest common prefix"},
  {id:16,title:"3Sum Closest",difficulty:"Medium",algorithms:["Array","Two Pointers","Sorting","Binary Search","Optimization"],correctAlgorithms:["Array","Two Pointers","Sorting"],description:"Find triplet with sum closest to target"},
  {id:17,title:"Letter Combinations of a Phone Number",difficulty:"Medium",algorithms:["Hash Table","String","Backtracking","DFS","BFS"],correctAlgorithms:["Hash Table","String","Backtracking"],description:"Generate letter combinations from phone digits"},
  {id:18,title:"4Sum",difficulty:"Medium",algorithms:["Array","Two Pointers","Sorting","Hash Table","Recursion"],correctAlgorithms:["Array","Two Pointers","Sorting"],description:"Find all unique quadruplets"},
  {id:19,title:"Remove Nth Node From End of List",difficulty:"Medium",algorithms:["Linked List","Two Pointers","Fast & Slow","Dummy Node","One Pass"],correctAlgorithms:["Linked List","Two Pointers"],description:"Remove nth node from end"},
  {id:22,title:"Generate Parentheses",difficulty:"Medium",algorithms:["String","Dynamic Programming","Backtracking","DFS","Catalan Number"],correctAlgorithms:["String","Dynamic Programming","Backtracking"],description:"Generate valid parentheses combinations"},
  {id:23,title:"Merge k Sorted Lists",difficulty:"Hard",algorithms:["Linked List","Divide and Conquer","Heap","Priority Queue","Merge Sort"],correctAlgorithms:["Linked List","Divide and Conquer","Heap"],description:"Merge k sorted linked lists"},
  {id:24,title:"Swap Nodes in Pairs",difficulty:"Medium",algorithms:["Linked List","Recursion","Iteration","Two Pointers","Dummy Node"],correctAlgorithms:["Linked List","Recursion"],description:"Swap every two adjacent nodes"},
  {id:25,title:"Reverse Nodes in k-Group",difficulty:"Hard",algorithms:["Linked List","Recursion","Stack","Two Pointers","Iteration"],correctAlgorithms:["Linked List","Recursion"],description:"Reverse nodes in k-group"},
  {id:28,title:"Find the Index of First Occurrence",difficulty:"Easy",algorithms:["Two Pointers","String","String Matching","KMP","Rabin-Karp"],correctAlgorithms:["Two Pointers","String","String Matching"],description:"Find first occurrence of substring"},
  {id:29,title:"Divide Two Integers",difficulty:"Medium",algorithms:["Math","Bit Manipulation","Binary Search","Exponential Search","Edge Cases"],correctAlgorithms:["Math","Bit Manipulation"],description:"Divide without multiplication/division"},
  {id:30,title:"Substring with Concatenation",difficulty:"Hard",algorithms:["Hash Table","String","Sliding Window","Two Pointers","Permutation"],correctAlgorithms:["Hash Table","String","Sliding Window"],description:"Find substring with word concatenation"},
  {id:32,title:"Longest Valid Parentheses",difficulty:"Hard",algorithms:["String","Dynamic Programming","Stack","Two Pass","Counter"],correctAlgorithms:["String","Dynamic Programming","Stack"],description:"Find longest valid parentheses substring"},
  {id:37,title:"Sudoku Solver",difficulty:"Hard",algorithms:["Array","Hash Table","Backtracking","Matrix","Constraint Propagation"],correctAlgorithms:["Array","Hash Table","Backtracking","Matrix"],description:"Solve Sudoku puzzle"},
  {id:38,title:"Count and Say",difficulty:"Medium",algorithms:["String","Simulation","Recursion","Iteration","Pattern"],correctAlgorithms:["String"],description:"Generate count and say sequence"},
  {id:43,title:"Multiply Strings",difficulty:"Medium",algorithms:["Math","String","Simulation","Grade School Algorithm","Array"],correctAlgorithms:["Math","String","Simulation"],description:"Multiply two string numbers"},
  {id:44,title:"Wildcard Matching",difficulty:"Hard",algorithms:["String","Dynamic Programming","Greedy","Recursion","Two Pointers"],correctAlgorithms:["String","Dynamic Programming","Greedy"],description:"Implement wildcard pattern matching"},
  
  // Problems 51-100
  {id:58,title:"Length of Last Word",difficulty:"Easy",algorithms:["String","Two Pointers","Trim","Split","Iteration"],correctAlgorithms:["String"],description:"Find length of last word"},
  {id:59,title:"Spiral Matrix II",difficulty:"Medium",algorithms:["Array","Matrix","Simulation","Layer by Layer","Direction Vector"],correctAlgorithms:["Array","Matrix","Simulation"],description:"Generate spiral matrix"},
  {id:60,title:"Permutation Sequence",difficulty:"Hard",algorithms:["Math","Backtracking","Factorial","Pattern","Recursion"],correctAlgorithms:["Math","Backtracking"],description:"Find kth permutation"},
  {id:61,title:"Rotate List",difficulty:"Medium",algorithms:["Linked List","Two Pointers","Math","Circular List","Length Calculation"],correctAlgorithms:["Linked List","Two Pointers"],description:"Rotate list to right"},
  {id:65,title:"Valid Number",difficulty:"Hard",algorithms:["String","State Machine","Regular Expression","Parsing","Validation"],correctAlgorithms:["String"],description:"Validate if string is number"},
  {id:68,title:"Text Justification",difficulty:"Hard",algorithms:["Array","String","Simulation","Greedy","Text Processing"],correctAlgorithms:["Array","String","Simulation"],description:"Justify text with spaces"},
  {id:80,title:"Remove Duplicates from Sorted Array II",difficulty:"Medium",algorithms:["Array","Two Pointers","In-place","Counter","Iteration"],correctAlgorithms:["Array","Two Pointers"],description:"Remove duplicates allowing at most twice"},
  {id:81,title:"Search in Rotated Sorted Array II",difficulty:"Medium",algorithms:["Array","Binary Search","Two Pointers","Edge Cases","Duplicates"],correctAlgorithms:["Array","Binary Search"],description:"Search in rotated array with duplicates"},
  {id:82,title:"Remove Duplicates from Sorted List II",difficulty:"Medium",algorithms:["Linked List","Two Pointers","Dummy Node","Recursion","Iteration"],correctAlgorithms:["Linked List","Two Pointers"],description:"Remove all duplicate nodes"},
  {id:83,title:"Remove Duplicates from Sorted List",difficulty:"Easy",algorithms:["Linked List","Two Pointers","Iteration","Set","Recursion"],correctAlgorithms:["Linked List"],description:"Remove duplicate nodes"},
  {id:86,title:"Partition List",difficulty:"Medium",algorithms:["Linked List","Two Pointers","Dummy Nodes","Partition","Merge"],correctAlgorithms:["Linked List","Two Pointers"],description:"Partition list around value"},
  {id:87,title:"Scramble String",difficulty:"Hard",algorithms:["String","Dynamic Programming","Recursion","Memoization","Divide and Conquer"],correctAlgorithms:["String","Dynamic Programming","Recursion"],description:"Check if scrambled string"},
  {id:89,title:"Gray Code",difficulty:"Medium",algorithms:["Math","Backtracking","Bit Manipulation","Recursion","Pattern"],correctAlgorithms:["Math","Backtracking","Bit Manipulation"],description:"Generate Gray code sequence"},
  {id:92,title:"Reverse Linked List II",difficulty:"Medium",algorithms:["Linked List","Two Pointers","Dummy Node","Iteration","Stack"],correctAlgorithms:["Linked List"],description:"Reverse list between positions"},
  {id:93,title:"Restore IP Addresses",difficulty:"Medium",algorithms:["String","Backtracking","DFS","Validation","Parsing"],correctAlgorithms:["String","Backtracking"],description:"Generate valid IP addresses"},
  {id:95,title:"Unique Binary Search Trees II",difficulty:"Medium",algorithms:["Dynamic Programming","Tree","Binary Search Tree","Recursion","Memoization"],correctAlgorithms:["Dynamic Programming","Tree","Binary Search Tree"],description:"Generate all unique BSTs"},
  {id:97,title:"Interleaving String",difficulty:"Medium",algorithms:["String","Dynamic Programming","DFS","Memoization","2D DP"],correctAlgorithms:["String","Dynamic Programming"],description:"Check if interleaving of strings"},
  {id:99,title:"Recover Binary Search Tree",difficulty:"Medium",algorithms:["Tree","DFS","Binary Search Tree","Morris Traversal","Inorder"],correctAlgorithms:["Tree","DFS","Binary Search Tree"],description:"Recover BST with swapped nodes"},
  
  // Problems 101-200
  {id:106,title:"Construct Binary Tree from Inorder and Postorder",difficulty:"Medium",algorithms:["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"],correctAlgorithms:["Array","Hash Table","Divide and Conquer","Tree","Binary Tree"],description:"Build tree from traversals"},
  {id:107,title:"Binary Tree Level Order Traversal II",difficulty:"Medium",algorithms:["Tree","BFS","Binary Tree","Queue","DFS"],correctAlgorithms:["Tree","BFS","Binary Tree"],description:"Bottom-up level order traversal"},
  {id:109,title:"Convert Sorted List to BST",difficulty:"Medium",algorithms:["Linked List","Divide and Conquer","Tree","Binary Search Tree","Two Pointers"],correctAlgorithms:["Linked List","Divide and Conquer","Tree","Binary Search Tree"],description:"Convert sorted list to BST"},
  {id:115,title:"Distinct Subsequences",difficulty:"Hard",algorithms:["String","Dynamic Programming","Memoization","2D DP","Recursion"],correctAlgorithms:["String","Dynamic Programming"],description:"Count distinct subsequences"},
  {id:117,title:"Populating Next Right Pointers II",difficulty:"Medium",algorithms:["Linked List","Tree","DFS","BFS","Binary Tree"],correctAlgorithms:["Linked List","Tree","DFS","BFS","Binary Tree"],description:"Connect nodes at same level (any tree)"},
  {id:126,title:"Word Ladder II",difficulty:"Hard",algorithms:["Hash Table","String","Backtracking","BFS","Graph"],correctAlgorithms:["Hash Table","String","Backtracking","BFS"],description:"Find all shortest transformation sequences"},
  {id:132,title:"Palindrome Partitioning II",difficulty:"Hard",algorithms:["String","Dynamic Programming","Palindrome","Memoization","Optimization"],correctAlgorithms:["String","Dynamic Programming"],description:"Minimum cuts for palindrome partitioning"},
  {id:135,title:"Candy",difficulty:"Hard",algorithms:["Array","Greedy","Two Pass","Dynamic Programming","Simulation"],correctAlgorithms:["Array","Greedy"],description:"Minimum candies distribution"},
  {id:144,title:"Binary Tree Preorder Traversal",difficulty:"Easy",algorithms:["Stack","Tree","DFS","Binary Tree","Morris Traversal"],correctAlgorithms:["Stack","Tree","DFS","Binary Tree"],description:"Preorder traversal of binary tree"},
  {id:145,title:"Binary Tree Postorder Traversal",difficulty:"Easy",algorithms:["Stack","Tree","DFS","Binary Tree","Morris Traversal"],correctAlgorithms:["Stack","Tree","DFS","Binary Tree"],description:"Postorder traversal of binary tree"},
  {id:147,title:"Insertion Sort List",difficulty:"Medium",algorithms:["Linked List","Sorting","Insertion Sort","Two Pointers","Dummy Node"],correctAlgorithms:["Linked List","Sorting"],description:"Sort linked list using insertion sort"},
  {id:149,title:"Max Points on a Line",difficulty:"Hard",algorithms:["Array","Hash Table","Math","Geometry","Slope Calculation"],correctAlgorithms:["Array","Hash Table","Math","Geometry"],description:"Maximum points on same line"},
  {id:154,title:"Find Minimum in Rotated Sorted Array II",difficulty:"Hard",algorithms:["Array","Binary Search","Divide and Conquer","Edge Cases","Duplicates"],correctAlgorithms:["Array","Binary Search","Divide and Conquer"],description:"Find minimum with duplicates"},
  {id:156,title:"Binary Tree Upside Down",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Recursion","Iteration"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Flip binary tree upside down"},
  {id:157,title:"Read N Characters Given Read4",difficulty:"Easy",algorithms:["String","Simulation","Buffer","API Design","Edge Cases"],correctAlgorithms:["String","Simulation"],description:"Read n characters using read4"},
  {id:158,title:"Read N Characters Given Read4 II",difficulty:"Hard",algorithms:["String","Design","Buffer","State Machine","API"],correctAlgorithms:["String","Design"],description:"Read n characters multiple calls"},
  {id:159,title:"Longest Substring with At Most Two Distinct",difficulty:"Medium",algorithms:["Hash Table","String","Sliding Window","Two Pointers","Counter"],correctAlgorithms:["Hash Table","String","Sliding Window"],description:"Longest substring with ≤2 distinct chars"},
  {id:161,title:"One Edit Distance",difficulty:"Medium",algorithms:["Two Pointers","String","Dynamic Programming","Edge Cases","Validation"],correctAlgorithms:["Two Pointers","String"],description:"Check if one edit distance"},
  {id:163,title:"Missing Ranges",difficulty:"Easy",algorithms:["Array","Simulation","Two Pointers","Edge Cases","String"],correctAlgorithms:["Array"],description:"Find missing ranges"},
  {id:164,title:"Maximum Gap",difficulty:"Medium",algorithms:["Array","Sorting","Bucket Sort","Radix Sort","Pigeonhole Principle"],correctAlgorithms:["Array","Sorting","Bucket Sort","Radix Sort"],description:"Maximum gap in sorted array"},
  {id:165,title:"Compare Version Numbers",difficulty:"Medium",algorithms:["Two Pointers","String","Split","Parsing","Comparison"],correctAlgorithms:["Two Pointers","String"],description:"Compare version numbers"},
  {id:166,title:"Fraction to Recurring Decimal",difficulty:"Medium",algorithms:["Hash Table","Math","String","Long Division","Simulation"],correctAlgorithms:["Hash Table","Math","String"],description:"Convert fraction to decimal"},
  {id:168,title:"Excel Sheet Column Title",difficulty:"Easy",algorithms:["Math","String","Base Conversion","Recursion","Iteration"],correctAlgorithms:["Math","String"],description:"Convert number to Excel column"},
  {id:170,title:"Two Sum III - Data structure design",difficulty:"Easy",algorithms:["Array","Hash Table","Design","Two Pointers","Trade-off"],correctAlgorithms:["Array","Hash Table","Design"],description:"Design two sum data structure"},
  {id:171,title:"Excel Sheet Column Number",difficulty:"Easy",algorithms:["Math","String","Base Conversion","Iteration","Pattern"],correctAlgorithms:["Math","String"],description:"Convert Excel column to number"},
  {id:172,title:"Factorial Trailing Zeroes",difficulty:"Medium",algorithms:["Math","Number Theory","Division","Pattern","Logarithm"],correctAlgorithms:["Math"],description:"Count trailing zeroes in factorial"},
  {id:173,title:"Binary Search Tree Iterator",difficulty:"Medium",algorithms:["Stack","Tree","Design","Binary Search Tree","Iterator"],correctAlgorithms:["Stack","Tree","Design","Binary Search Tree"],description:"Implement BST iterator"},
  {id:174,title:"Dungeon Game",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Matrix","Binary Search","Game Theory"],correctAlgorithms:["Array","Dynamic Programming","Matrix"],description:"Minimum health for dungeon"},
  {id:175,title:"Combine Two Tables",difficulty:"Easy",algorithms:["Database","SQL","Join","Left Join","Query"],correctAlgorithms:["Database"],description:"SQL join two tables"},
  {id:176,title:"Second Highest Salary",difficulty:"Medium",algorithms:["Database","SQL","Subquery","Limit","Distinct"],correctAlgorithms:["Database"],description:"Find second highest salary"},
  {id:177,title:"Nth Highest Salary",difficulty:"Medium",algorithms:["Database","SQL","Function","Limit","Offset"],correctAlgorithms:["Database"],description:"Find nth highest salary"},
  {id:178,title:"Rank Scores",difficulty:"Medium",algorithms:["Database","SQL","Window Function","Dense Rank","Subquery"],correctAlgorithms:["Database"],description:"Rank scores in SQL"},
  {id:180,title:"Consecutive Numbers",difficulty:"Medium",algorithms:["Database","SQL","Self Join","Window Function","Lead/Lag"],correctAlgorithms:["Database"],description:"Find consecutive numbers"},
  {id:181,title:"Employees Earning More Than Managers",difficulty:"Easy",algorithms:["Database","SQL","Self Join","Comparison","Query"],correctAlgorithms:["Database"],description:"Find employees earning more"},
  {id:182,title:"Duplicate Emails",difficulty:"Easy",algorithms:["Database","SQL","Group By","Having","Count"],correctAlgorithms:["Database"],description:"Find duplicate emails"},
  {id:183,title:"Customers Who Never Order",difficulty:"Easy",algorithms:["Database","SQL","Left Join","Not In","Subquery"],correctAlgorithms:["Database"],description:"Find customers with no orders"},
  {id:184,title:"Department Highest Salary",difficulty:"Medium",algorithms:["Database","SQL","Join","Group By","Max"],correctAlgorithms:["Database"],description:"Find highest salary per department"},
  {id:185,title:"Department Top Three Salaries",difficulty:"Hard",algorithms:["Database","SQL","Window Function","Dense Rank","Partition"],correctAlgorithms:["Database"],description:"Top 3 salaries per department"},
  {id:186,title:"Reverse Words in a String II",difficulty:"Medium",algorithms:["Two Pointers","String","In-place","Reverse","Space Optimization"],correctAlgorithms:["Two Pointers","String"],description:"Reverse words in-place"},
  {id:187,title:"Repeated DNA Sequences",difficulty:"Medium",algorithms:["Hash Table","String","Bit Manipulation","Sliding Window","Rolling Hash"],correctAlgorithms:["Hash Table","String","Bit Manipulation","Sliding Window"],description:"Find repeated DNA sequences"},
  {id:188,title:"Best Time to Buy and Sell Stock IV",difficulty:"Hard",algorithms:["Array","Dynamic Programming","State Machine","Optimization","K Transactions"],correctAlgorithms:["Array","Dynamic Programming"],description:"Maximum profit with k transactions"},
  {id:192,title:"Word Frequency",difficulty:"Medium",algorithms:["Shell","Bash","Text Processing","Sort","Awk"],correctAlgorithms:["Shell"],description:"Count word frequency in bash"},
  {id:193,title:"Valid Phone Numbers",difficulty:"Easy",algorithms:["Shell","Bash","Regular Expression","Grep","Pattern Matching"],correctAlgorithms:["Shell"],description:"Filter valid phone numbers"},
  {id:194,title:"Transpose File",difficulty:"Medium",algorithms:["Shell","Bash","Awk","Text Processing","Matrix"],correctAlgorithms:["Shell"],description:"Transpose file content"},
  {id:195,title:"Tenth Line",difficulty:"Easy",algorithms:["Shell","Bash","Sed","Head/Tail","Line Processing"],correctAlgorithms:["Shell"],description:"Print tenth line of file"},
  {id:196,title:"Delete Duplicate Emails",difficulty:"Easy",algorithms:["Database","SQL","Delete","Self Join","Min"],correctAlgorithms:["Database"],description:"Delete duplicate emails"},
  {id:197,title:"Rising Temperature",difficulty:"Easy",algorithms:["Database","SQL","Self Join","Date Functions","Comparison"],correctAlgorithms:["Database"],description:"Find rising temperatures"},
  
  // Problems 201-300
  {id:201,title:"Bitwise AND of Numbers Range",difficulty:"Medium",algorithms:["Bit Manipulation","Math","Brian Kernighan","Common Prefix","Range"],correctAlgorithms:["Bit Manipulation","Math"],description:"Bitwise AND of range"},
  {id:212,title:"Word Search II",difficulty:"Hard",algorithms:["Array","String","Backtracking","Trie","Matrix"],correctAlgorithms:["Array","String","Backtracking","Trie","Matrix"],description:"Find all words in board"},
  {id:214,title:"Shortest Palindrome",difficulty:"Hard",algorithms:["String","Rolling Hash","String Matching","KMP","Reverse"],correctAlgorithms:["String","Rolling Hash","String Matching"],description:"Find shortest palindrome by prepending"},
  {id:218,title:"The Skyline Problem",difficulty:"Hard",algorithms:["Array","Divide and Conquer","Heap","Binary Indexed Tree","Line Sweep"],correctAlgorithms:["Array","Divide and Conquer","Heap","Binary Indexed Tree","Line Sweep"],description:"Generate skyline from buildings"},
  {id:220,title:"Contains Duplicate III",difficulty:"Hard",algorithms:["Array","Sliding Window","Bucket Sort","Ordered Set","TreeSet"],correctAlgorithms:["Array","Sliding Window","Bucket Sort","Ordered Set"],description:"Check duplicates within range and value"},
  {id:222,title:"Count Complete Tree Nodes",difficulty:"Easy",algorithms:["Binary Search","Tree","DFS","Binary Tree","Complete Tree"],correctAlgorithms:["Binary Search","Tree","DFS","Binary Tree"],description:"Count nodes in complete tree"},
  {id:223,title:"Rectangle Area",difficulty:"Medium",algorithms:["Math","Geometry","Overlap","Area Calculation","Edge Cases"],correctAlgorithms:["Math","Geometry"],description:"Calculate total area of rectangles"},
  {id:228,title:"Summary Ranges",difficulty:"Easy",algorithms:["Array","Two Pointers","String","Range","Simulation"],correctAlgorithms:["Array"],description:"Summarize sorted array as ranges"},
  {id:229,title:"Majority Element II",difficulty:"Medium",algorithms:["Array","Hash Table","Sorting","Boyer-Moore Voting","Counting"],correctAlgorithms:["Array","Hash Table","Sorting","Counting"],description:"Find elements appearing >n/3 times"},
  {id:233,title:"Number of Digit One",difficulty:"Hard",algorithms:["Math","Dynamic Programming","Digit DP","Pattern","Recursion"],correctAlgorithms:["Math","Dynamic Programming"],description:"Count digit 1 occurrences"},
  {id:241,title:"Different Ways to Add Parentheses",difficulty:"Medium",algorithms:["Math","String","Dynamic Programming","Recursion","Divide and Conquer"],correctAlgorithms:["Math","String","Dynamic Programming","Recursion"],description:"Compute all results from expression"},
  {id:243,title:"Shortest Word Distance",difficulty:"Easy",algorithms:["Array","String","Two Pointers","Linear Scan","Min Distance"],correctAlgorithms:["Array","String"],description:"Shortest distance between words"},
  {id:244,title:"Shortest Word Distance II",difficulty:"Medium",algorithms:["Array","Hash Table","Design","Two Pointers","Preprocessing"],correctAlgorithms:["Array","Hash Table","Design"],description:"Design word distance finder"},
  {id:245,title:"Shortest Word Distance III",difficulty:"Medium",algorithms:["Array","String","Two Pointers","Edge Cases","Same Word"],correctAlgorithms:["Array","String"],description:"Shortest distance with same words"},
  {id:246,title:"Strobogrammatic Number",difficulty:"Easy",algorithms:["Hash Table","Two Pointers","String","Math","Validation"],correctAlgorithms:["Hash Table","Two Pointers","String","Math"],description:"Check if number looks same rotated"},
  {id:247,title:"Strobogrammatic Number II",difficulty:"Medium",algorithms:["Array","String","Recursion","Backtracking","DFS"],correctAlgorithms:["Array","String","Recursion"],description:"Find all strobogrammatic numbers"},
  {id:248,title:"Strobogrammatic Number III",difficulty:"Hard",algorithms:["Math","String","Dynamic Programming","DFS","Count"],correctAlgorithms:["Math","String","Dynamic Programming"],description:"Count strobogrammatic in range"},
  {id:249,title:"Group Shifted Strings",difficulty:"Medium",algorithms:["Array","Hash Table","String","Pattern","Shifting"],correctAlgorithms:["Array","Hash Table","String"],description:"Group strings by shifting pattern"},
  {id:250,title:"Count Univalue Subtrees",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Recursion","Bottom-up"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Count subtrees with same value"},
  {id:251,title:"Flatten 2D Vector",difficulty:"Medium",algorithms:["Array","Design","Iterator","Two Pointers","Nested List"],correctAlgorithms:["Array","Design"],description:"Design 2D vector iterator"},
  {id:252,title:"Meeting Rooms",difficulty:"Easy",algorithms:["Array","Sorting","Interval","Overlap Detection","Greedy"],correctAlgorithms:["Array","Sorting"],description:"Check if person can attend all meetings"},
  {id:253,title:"Meeting Rooms II",difficulty:"Medium",algorithms:["Array","Two Pointers","Greedy","Sorting","Heap"],correctAlgorithms:["Array","Two Pointers","Greedy","Sorting","Heap"],description:"Minimum meeting rooms required"},
  {id:254,title:"Factor Combinations",difficulty:"Medium",algorithms:["Array","Backtracking","Math","DFS","Factorization"],correctAlgorithms:["Array","Backtracking","Math"],description:"Find all factor combinations"},
  {id:255,title:"Verify Preorder Sequence in BST",difficulty:"Medium",algorithms:["Stack","Tree","Binary Search Tree","Monotonic Stack","Validation"],correctAlgorithms:["Stack","Tree","Binary Search Tree","Monotonic Stack"],description:"Verify preorder is valid BST"},
  {id:256,title:"Paint House",difficulty:"Medium",algorithms:["Array","Dynamic Programming","State Machine","Optimization","Cost"],correctAlgorithms:["Array","Dynamic Programming"],description:"Minimum cost to paint houses"},
  {id:257,title:"Binary Tree Paths",difficulty:"Easy",algorithms:["String","Tree","DFS","Binary Tree","Backtracking"],correctAlgorithms:["String","Tree","DFS","Binary Tree","Backtracking"],description:"Find all root-to-leaf paths"},
  {id:258,title:"Add Digits",difficulty:"Easy",algorithms:["Math","Simulation","Digital Root","Modulo","Pattern"],correctAlgorithms:["Math","Simulation"],description:"Add digits until single digit"},
  {id:259,title:"3Sum Smaller",difficulty:"Medium",algorithms:["Array","Two Pointers","Binary Search","Sorting","Count"],correctAlgorithms:["Array","Two Pointers","Binary Search","Sorting"],description:"Count triplets with sum < target"},
  {id:260,title:"Single Number III",difficulty:"Medium",algorithms:["Array","Bit Manipulation","XOR","Partition","Math"],correctAlgorithms:["Array","Bit Manipulation"],description:"Find two unique numbers"},
  {id:261,title:"Graph Valid Tree",difficulty:"Medium",algorithms:["DFS","BFS","Union Find","Graph","Tree Validation"],correctAlgorithms:["DFS","BFS","Union Find","Graph"],description:"Check if graph is valid tree"},
  {id:262,title:"Trips and Users",difficulty:"Hard",algorithms:["Database","SQL","Join","Case When","Round"],correctAlgorithms:["Database"],description:"Calculate cancellation rate"},
  {id:263,title:"Ugly Number",difficulty:"Easy",algorithms:["Math","Prime Factors","Division","Recursion","Iteration"],correctAlgorithms:["Math"],description:"Check if number has only 2,3,5 factors"},
  {id:264,title:"Ugly Number II",difficulty:"Medium",algorithms:["Hash Table","Math","Dynamic Programming","Heap","Three Pointers"],correctAlgorithms:["Hash Table","Math","Dynamic Programming","Heap"],description:"Find nth ugly number"},
  {id:265,title:"Paint House II",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Optimization","State Reduction","K Colors"],correctAlgorithms:["Array","Dynamic Programming"],description:"Paint houses with k colors"},
  {id:266,title:"Palindrome Permutation",difficulty:"Easy",algorithms:["Hash Table","String","Bit Manipulation","Counting","Odd/Even"],correctAlgorithms:["Hash Table","String","Bit Manipulation"],description:"Check if permutation can form palindrome"},
  {id:267,title:"Palindrome Permutation II",difficulty:"Medium",algorithms:["Hash Table","String","Backtracking","DFS","Permutation"],correctAlgorithms:["Hash Table","String","Backtracking"],description:"Generate all palindrome permutations"},
  {id:268,title:"Missing Number",difficulty:"Easy",algorithms:["Array","Hash Table","Math","Bit Manipulation","Sum Formula"],correctAlgorithms:["Array","Hash Table","Math","Bit Manipulation"],description:"Find missing number in sequence"},
  {id:269,title:"Alien Dictionary",difficulty:"Hard",algorithms:["Array","String","DFS","BFS","Graph","Topological Sort"],correctAlgorithms:["Array","String","DFS","BFS","Graph","Topological Sort"],description:"Derive alien language order"},
  {id:270,title:"Closest Binary Search Tree Value",difficulty:"Easy",algorithms:["Binary Search","Tree","Binary Search Tree","DFS","Iteration"],correctAlgorithms:["Binary Search","Tree","Binary Search Tree"],description:"Find closest value in BST"},
  {id:271,title:"Encode and Decode Strings",difficulty:"Medium",algorithms:["Array","String","Design","Encoding","Delimiter"],correctAlgorithms:["Array","String","Design"],description:"Encode/decode string list"},
  {id:272,title:"Closest Binary Search Tree Value II",difficulty:"Hard",algorithms:["Stack","Tree","Heap","Binary Search Tree","Two Stacks"],correctAlgorithms:["Stack","Tree","Heap","Binary Search Tree"],description:"Find k closest values in BST"},
  {id:273,title:"Integer to English Words",difficulty:"Hard",algorithms:["Math","String","Recursion","Divide and Conquer","Pattern"],correctAlgorithms:["Math","String","Recursion"],description:"Convert number to English words"},
  {id:274,title:"H-Index",difficulty:"Medium",algorithms:["Array","Sorting","Counting Sort","Binary Search","Bucket Sort"],correctAlgorithms:["Array","Sorting","Counting Sort"],description:"Calculate H-Index"},
  {id:275,title:"H-Index II",difficulty:"Medium",algorithms:["Array","Binary Search","Sorted Array","Optimization","Edge Cases"],correctAlgorithms:["Array","Binary Search"],description:"H-Index on sorted array"},
  {id:276,title:"Paint Fence",difficulty:"Easy",algorithms:["Dynamic Programming","Math","State Machine","Recursion","Pattern"],correctAlgorithms:["Dynamic Programming","Math"],description:"Ways to paint fence"},
  {id:277,title:"Find the Celebrity",difficulty:"Medium",algorithms:["Two Pointers","Array","Greedy","Graph","Elimination"],correctAlgorithms:["Two Pointers","Array","Greedy","Graph"],description:"Find celebrity in party"},
  {id:278,title:"First Bad Version",difficulty:"Easy",algorithms:["Binary Search","Interactive","API Design","Optimization","Edge Cases"],correctAlgorithms:["Binary Search","Interactive"],description:"Find first bad version"},
  {id:279,title:"Perfect Squares",difficulty:"Medium",algorithms:["Math","Dynamic Programming","BFS","Number Theory","Lagrange"],correctAlgorithms:["Math","Dynamic Programming","BFS"],description:"Minimum perfect squares sum"},
  {id:280,title:"Wiggle Sort",difficulty:"Medium",algorithms:["Array","Greedy","Sorting","Swap","Pattern"],correctAlgorithms:["Array","Greedy","Sorting"],description:"Reorder array in wiggle pattern"},
  {id:281,title:"Zigzag Iterator",difficulty:"Medium",algorithms:["Array","Design","Queue","Iterator","Multiple Lists"],correctAlgorithms:["Array","Design","Queue"],description:"Iterate through lists zigzag"},
  {id:282,title:"Expression Add Operators",difficulty:"Hard",algorithms:["Math","String","Backtracking","DFS","Expression Evaluation"],correctAlgorithms:["Math","String","Backtracking"],description:"Add operators to reach target"},
  {id:283,title:"Move Zeroes",difficulty:"Easy",algorithms:["Array","Two Pointers","In-place","Swap","Partition"],correctAlgorithms:["Array","Two Pointers"],description:"Move zeros to end"},
  {id:284,title:"Peeking Iterator",difficulty:"Medium",algorithms:["Array","Design","Iterator","Cache","Peek Operation"],correctAlgorithms:["Array","Design","Iterator"],description:"Design peeking iterator"},
  {id:285,title:"Inorder Successor in BST",difficulty:"Medium",algorithms:["Tree","Binary Search Tree","DFS","Successor","Parent Pointer"],correctAlgorithms:["Tree","Binary Search Tree","DFS"],description:"Find inorder successor in BST"},
  {id:286,title:"Walls and Gates",difficulty:"Medium",algorithms:["Array","BFS","Matrix","Multi-source BFS","Distance"],correctAlgorithms:["Array","BFS","Matrix"],description:"Fill distances to gates"},
  {id:287,title:"Find the Duplicate Number",difficulty:"Medium",algorithms:["Array","Two Pointers","Binary Search","Floyd's Cycle","Bit Manipulation"],correctAlgorithms:["Array","Two Pointers","Binary Search","Bit Manipulation"],description:"Find duplicate in array"},
  {id:288,title:"Unique Word Abbreviation",difficulty:"Medium",algorithms:["Array","Hash Table","Design","String","Abbreviation"],correctAlgorithms:["Array","Hash Table","Design","String"],description:"Design unique abbreviation validator"},
  {id:289,title:"Game of Life",difficulty:"Medium",algorithms:["Array","Matrix","Simulation","In-place","Bit Manipulation"],correctAlgorithms:["Array","Matrix","Simulation"],description:"Simulate Conway's Game of Life"},
  {id:290,title:"Word Pattern",difficulty:"Easy",algorithms:["Hash Table","String","Pattern Matching","Bijection","Mapping"],correctAlgorithms:["Hash Table","String"],description:"Check if string follows pattern"},
  {id:291,title:"Word Pattern II",difficulty:"Medium",algorithms:["Hash Table","String","Backtracking","DFS","Pattern Matching"],correctAlgorithms:["Hash Table","String","Backtracking"],description:"Match pattern with string"},
  {id:292,title:"Nim Game",difficulty:"Easy",algorithms:["Math","Brainteaser","Game Theory","Pattern","Modulo"],correctAlgorithms:["Math","Brainteaser"],description:"Determine Nim game winner"},
  {id:293,title:"Flip Game",difficulty:"Easy",algorithms:["String","Simulation","Game","State Generation","Pattern"],correctAlgorithms:["String","Simulation"],description:"Generate next possible states"},
  {id:294,title:"Flip Game II",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Backtracking","Game Theory","Minimax"],correctAlgorithms:["Math","Dynamic Programming","Backtracking","Minimax"],description:"Determine if can win game"},
  {id:295,title:"Find Median from Data Stream",difficulty:"Hard",algorithms:["Two Pointers","Design","Heap","Data Stream","Balanced Heaps"],correctAlgorithms:["Two Pointers","Design","Heap","Data Stream"],description:"Find median in data stream"},
  {id:296,title:"Best Meeting Point",difficulty:"Hard",algorithms:["Array","Math","Sorting","Median","Manhattan Distance"],correctAlgorithms:["Array","Math","Sorting"],description:"Find best meeting point"},
  {id:297,title:"Serialize and Deserialize Binary Tree",difficulty:"Hard",algorithms:["String","Tree","DFS","BFS","Design"],correctAlgorithms:["String","Tree","DFS","BFS","Design"],description:"Serialize/deserialize binary tree"},
  {id:298,title:"Binary Tree Longest Consecutive Sequence",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Bottom-up","Top-down"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Find longest consecutive path"},
  {id:299,title:"Bulls and Cows",difficulty:"Medium",algorithms:["Hash Table","String","Counting","Game","Comparison"],correctAlgorithms:["Hash Table","String","Counting"],description:"Play Bulls and Cows game"},
  {id:300,title:"Longest Increasing Subsequence",difficulty:"Medium",algorithms:["Array","Binary Search","Dynamic Programming","Patience Sorting","Greedy"],correctAlgorithms:["Array","Binary Search","Dynamic Programming"],description:"Find longest increasing subsequence"},
  
  // Problems 301-400
  {id:301,title:"Remove Invalid Parentheses",difficulty:"Hard",algorithms:["String","Backtracking","BFS","DFS","Validation"],correctAlgorithms:["String","Backtracking","BFS"],description:"Remove minimum invalid parentheses"},
  {id:302,title:"Smallest Rectangle Enclosing Black Pixels",difficulty:"Hard",algorithms:["Array","Binary Search","DFS","BFS","Matrix"],correctAlgorithms:["Array","Binary Search","DFS","BFS","Matrix"],description:"Find smallest rectangle with black pixels"},
  {id:303,title:"Range Sum Query - Immutable",difficulty:"Easy",algorithms:["Array","Design","Prefix Sum","Cache","Range Query"],correctAlgorithms:["Array","Design","Prefix Sum"],description:"Calculate range sum"},
  {id:304,title:"Range Sum Query 2D - Immutable",difficulty:"Medium",algorithms:["Array","Design","Matrix","Prefix Sum","2D Prefix Sum"],correctAlgorithms:["Array","Design","Matrix","Prefix Sum"],description:"2D range sum query"},
  {id:305,title:"Number of Islands II",difficulty:"Hard",algorithms:["Array","Union Find","Matrix","Dynamic Connectivity","Island"],correctAlgorithms:["Array","Union Find"],description:"Count islands with operations"},
  {id:306,title:"Additive Number",difficulty:"Medium",algorithms:["String","Backtracking","Math","Validation","Fibonacci"],correctAlgorithms:["String","Backtracking","Math"],description:"Check if additive sequence"},
  {id:307,title:"Range Sum Query - Mutable",difficulty:"Medium",algorithms:["Array","Design","Binary Indexed Tree","Segment Tree","Range Query"],correctAlgorithms:["Array","Design","Binary Indexed Tree","Segment Tree"],description:"Range sum with updates"},
  {id:308,title:"Range Sum Query 2D - Mutable",difficulty:"Hard",algorithms:["Array","Design","Matrix","Binary Indexed Tree","2D BIT"],correctAlgorithms:["Array","Design","Matrix","Binary Indexed Tree"],description:"2D range sum with updates"},
  {id:309,title:"Best Time to Buy and Sell Stock with Cooldown",difficulty:"Medium",algorithms:["Array","Dynamic Programming","State Machine","Cooldown","Optimization"],correctAlgorithms:["Array","Dynamic Programming","State Machine"],description:"Stock trading with cooldown"},
  {id:310,title:"Minimum Height Trees",difficulty:"Medium",algorithms:["DFS","BFS","Graph","Topological Sort","Tree Center"],correctAlgorithms:["DFS","BFS","Graph","Topological Sort"],description:"Find minimum height tree roots"},
  {id:311,title:"Sparse Matrix Multiplication",difficulty:"Medium",algorithms:["Array","Hash Table","Matrix","Sparse Matrix","Optimization"],correctAlgorithms:["Array","Hash Table","Matrix"],description:"Multiply sparse matrices"},
  {id:312,title:"Burst Balloons",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Divide and Conquer","Interval DP","Memoization"],correctAlgorithms:["Array","Dynamic Programming","Divide and Conquer"],description:"Maximum coins from bursting balloons"},
  {id:313,title:"Super Ugly Number",difficulty:"Medium",algorithms:["Array","Math","Dynamic Programming","Heap","K Pointers"],correctAlgorithms:["Array","Math","Dynamic Programming","Heap"],description:"Find nth super ugly number"},
  {id:314,title:"Binary Tree Vertical Order Traversal",difficulty:"Medium",algorithms:["Hash Table","Tree","DFS","BFS","Binary Tree"],correctAlgorithms:["Hash Table","Tree","DFS","BFS","Binary Tree"],description:"Vertical order traversal"},
  {id:315,title:"Count of Smaller Numbers After Self",difficulty:"Hard",algorithms:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Merge Sort"],correctAlgorithms:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Segment Tree"],description:"Count smaller elements to right"},
  {id:316,title:"Remove Duplicate Letters",difficulty:"Medium",algorithms:["String","Stack","Greedy","Monotonic Stack","Hash Table"],correctAlgorithms:["String","Stack","Greedy","Monotonic Stack","Hash Table"],description:"Remove duplicates lexicographically"},
  {id:317,title:"Shortest Distance from All Buildings",difficulty:"Hard",algorithms:["Array","BFS","Matrix","Multi-source BFS","Manhattan Distance"],correctAlgorithms:["Array","BFS","Matrix"],description:"Find best building location"},
  {id:318,title:"Maximum Product of Word Lengths",difficulty:"Medium",algorithms:["Array","String","Bit Manipulation","Bitmask","Optimization"],correctAlgorithms:["Array","String","Bit Manipulation"],description:"Maximum product of non-overlapping words"},
  {id:319,title:"Bulb Switcher",difficulty:"Medium",algorithms:["Math","Brainteaser","Square Root","Pattern","Number Theory"],correctAlgorithms:["Math","Brainteaser"],description:"Count bulbs on after n rounds"},
  {id:320,title:"Generalized Abbreviation",difficulty:"Medium",algorithms:["String","Backtracking","Bit Manipulation","DFS","Subset"],correctAlgorithms:["String","Backtracking","Bit Manipulation"],description:"Generate all abbreviations"},
  {id:321,title:"Create Maximum Number",difficulty:"Hard",algorithms:["Stack","Greedy","Dynamic Programming","Monotonic Stack","Merge"],correctAlgorithms:["Stack","Greedy","Dynamic Programming","Monotonic Stack"],description:"Create maximum number from arrays"},
  {id:323,title:"Number of Connected Components",difficulty:"Medium",algorithms:["DFS","BFS","Union Find","Graph","Component Count"],correctAlgorithms:["DFS","BFS","Union Find","Graph"],description:"Count connected components"},
  {id:324,title:"Wiggle Sort II",difficulty:"Medium",algorithms:["Array","Divide and Conquer","Sorting","Quickselect","Virtual Indexing"],correctAlgorithms:["Array","Divide and Conquer","Sorting","Quickselect"],description:"Wiggle sort with strict inequality"},
  {id:325,title:"Maximum Size Subarray Sum Equals k",difficulty:"Medium",algorithms:["Array","Hash Table","Prefix Sum","Subarray","Optimization"],correctAlgorithms:["Array","Hash Table","Prefix Sum"],description:"Maximum subarray with sum k"},
  {id:326,title:"Power of Three",difficulty:"Easy",algorithms:["Math","Recursion","Logarithm","Loop","Integer Limit"],correctAlgorithms:["Math","Recursion"],description:"Check if power of three"},
  {id:327,title:"Count of Range Sum",difficulty:"Hard",algorithms:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Merge Sort"],correctAlgorithms:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Segment Tree"],description:"Count range sums in range"},
  {id:328,title:"Odd Even Linked List",difficulty:"Medium",algorithms:["Linked List","Two Pointers","Partition","Dummy Node","Merge"],correctAlgorithms:["Linked List"],description:"Group odd and even nodes"},
  {id:329,title:"Longest Increasing Path in a Matrix",difficulty:"Hard",algorithms:["Array","Dynamic Programming","DFS","Graph","Memoization","Topological Sort"],correctAlgorithms:["Array","Dynamic Programming","DFS","Graph","Memoization","Topological Sort"],description:"Find longest increasing path"},
  {id:330,title:"Patching Array",difficulty:"Hard",algorithms:["Array","Greedy","Math","Range Coverage","Optimization"],correctAlgorithms:["Array","Greedy","Math"],description:"Minimum patches to cover range"},
  {id:331,title:"Verify Preorder Serialization",difficulty:"Medium",algorithms:["String","Stack","Tree","Validation","Degree"],correctAlgorithms:["String","Stack","Tree"],description:"Verify preorder serialization"},
  {id:332,title:"Reconstruct Itinerary",difficulty:"Hard",algorithms:["DFS","Graph","Eulerian Path","Hierholzer","Backtracking"],correctAlgorithms:["DFS","Graph","Eulerian Path"],description:"Reconstruct flight itinerary"},
  {id:333,title:"Largest BST Subtree",difficulty:"Medium",algorithms:["Tree","DFS","Binary Search Tree","Binary Tree","Bottom-up"],correctAlgorithms:["Tree","DFS","Binary Search Tree","Binary Tree"],description:"Find largest BST subtree"},
  {id:334,title:"Increasing Triplet Subsequence",difficulty:"Medium",algorithms:["Array","Greedy","Dynamic Programming","Two Variables","Linear Scan"],correctAlgorithms:["Array","Greedy"],description:"Check if increasing triplet exists"},
  {id:335,title:"Self Crossing",difficulty:"Hard",algorithms:["Array","Math","Geometry","Pattern","Edge Cases"],correctAlgorithms:["Array","Math","Geometry"],description:"Check if path crosses itself"},
  {id:336,title:"Palindrome Pairs",difficulty:"Hard",algorithms:["Array","Hash Table","String","Trie","Palindrome"],correctAlgorithms:["Array","Hash Table","String","Trie"],description:"Find palindrome pairs"},
  {id:337,title:"House Robber III",difficulty:"Medium",algorithms:["Dynamic Programming","Tree","DFS","Binary Tree","Memoization"],correctAlgorithms:["Dynamic Programming","Tree","DFS","Binary Tree"],description:"Rob houses in binary tree"},
  {id:338,title:"Counting Bits",difficulty:"Easy",algorithms:["Dynamic Programming","Bit Manipulation","Pattern","Brian Kernighan","DP"],correctAlgorithms:["Dynamic Programming","Bit Manipulation"],description:"Count bits for range"},
  {id:339,title:"Nested List Weight Sum",difficulty:"Medium",algorithms:["DFS","BFS","Recursion","Nested Structure","Depth"],correctAlgorithms:["DFS","BFS"],description:"Calculate weighted sum by depth"},
  {id:340,title:"Longest Substring with At Most K Distinct",difficulty:"Hard",algorithms:["Hash Table","String","Sliding Window","Two Pointers","Counter"],correctAlgorithms:["Hash Table","String","Sliding Window"],description:"Longest substring with ≤k distinct"},
  {id:341,title:"Flatten Nested List Iterator",difficulty:"Medium",algorithms:["Stack","Design","Iterator","DFS","Nested Structure"],correctAlgorithms:["Stack","Design","Iterator","DFS"],description:"Flatten nested list iterator"},
  {id:342,title:"Power of Four",difficulty:"Easy",algorithms:["Math","Bit Manipulation","Recursion","Pattern","Mask"],correctAlgorithms:["Math","Bit Manipulation","Recursion"],description:"Check if power of four"},
  {id:343,title:"Integer Break",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Greedy","Number Theory","Pattern"],correctAlgorithms:["Math","Dynamic Programming"],description:"Maximum product from integer break"},
  {id:344,title:"Reverse String",difficulty:"Easy",algorithms:["Two Pointers","String","In-place","Swap","Recursion"],correctAlgorithms:["Two Pointers","String"],description:"Reverse string in-place"},
  {id:345,title:"Reverse Vowels of a String",difficulty:"Easy",algorithms:["Two Pointers","String","Set","Swap","Pattern"],correctAlgorithms:["Two Pointers","String"],description:"Reverse only vowels"},
  {id:346,title:"Moving Average from Data Stream",difficulty:"Easy",algorithms:["Array","Design","Queue","Data Stream","Sliding Window"],correctAlgorithms:["Array","Design","Queue","Data Stream"],description:"Calculate moving average"},
  {id:348,title:"Design Tic-Tac-Toe",difficulty:"Medium",algorithms:["Array","Design","Matrix","Game","Optimization"],correctAlgorithms:["Array","Design","Matrix"],description:"Design Tic-Tac-Toe game"},
  {id:349,title:"Intersection of Two Arrays",difficulty:"Easy",algorithms:["Array","Hash Table","Two Pointers","Binary Search","Set"],correctAlgorithms:["Array","Hash Table","Two Pointers","Binary Search"],description:"Find array intersection"},
  {id:350,title:"Intersection of Two Arrays II",difficulty:"Easy",algorithms:["Array","Hash Table","Two Pointers","Binary Search","Sorting"],correctAlgorithms:["Array","Hash Table","Two Pointers","Binary Search","Sorting"],description:"Find intersection with duplicates"},
  {id:351,title:"Android Unlock Patterns",difficulty:"Medium",algorithms:["Dynamic Programming","Backtracking","DFS","Pattern","Symmetry"],correctAlgorithms:["Dynamic Programming","Backtracking"],description:"Count Android unlock patterns"},
  {id:352,title:"Data Stream as Disjoint Intervals",difficulty:"Hard",algorithms:["Binary Search","Design","Ordered Map","Interval","TreeMap"],correctAlgorithms:["Binary Search","Design","Ordered Map"],description:"Summarize stream as intervals"},
  {id:353,title:"Design Snake Game",difficulty:"Medium",algorithms:["Array","Design","Queue","Simulation","Deque"],correctAlgorithms:["Array","Design","Queue","Simulation"],description:"Design snake game"},
  {id:354,title:"Russian Doll Envelopes",difficulty:"Hard",algorithms:["Array","Binary Search","Dynamic Programming","Sorting","LIS"],correctAlgorithms:["Array","Binary Search","Dynamic Programming","Sorting"],description:"Maximum envelope nesting"},
  {id:355,title:"Design Twitter",difficulty:"Medium",algorithms:["Hash Table","Linked List","Design","Heap","Timestamp"],correctAlgorithms:["Hash Table","Linked List","Design","Heap"],description:"Design Twitter system"},
  {id:356,title:"Line Reflection",difficulty:"Medium",algorithms:["Array","Hash Table","Math","Geometry","Symmetry"],correctAlgorithms:["Array","Hash Table","Math"],description:"Check if points have line reflection"},
  {id:357,title:"Count Numbers with Unique Digits",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Backtracking","Combinatorics","Permutation"],correctAlgorithms:["Math","Dynamic Programming","Backtracking"],description:"Count numbers with unique digits"},
  {id:358,title:"Rearrange String k Distance Apart",difficulty:"Hard",algorithms:["Hash Table","String","Greedy","Heap","Queue"],correctAlgorithms:["Hash Table","String","Greedy","Heap"],description:"Rearrange string k distance apart"},
  {id:359,title:"Logger Rate Limiter",difficulty:"Easy",algorithms:["Hash Table","Design","Timestamp","Rate Limiting","Set"],correctAlgorithms:["Hash Table","Design"],description:"Design logger rate limiter"},
  {id:360,title:"Sort Transformed Array",difficulty:"Medium",algorithms:["Array","Math","Two Pointers","Sorting","Parabola"],correctAlgorithms:["Array","Math","Two Pointers","Sorting"],description:"Sort quadratic transformed array"},
  {id:361,title:"Bomb Enemy",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Matrix","Preprocessing","Grid"],correctAlgorithms:["Array","Dynamic Programming","Matrix"],description:"Maximum enemies killed by bomb"},
  {id:362,title:"Design Hit Counter",difficulty:"Medium",algorithms:["Array","Hash Table","Design","Queue","Binary Search"],correctAlgorithms:["Array","Hash Table","Design","Queue","Binary Search"],description:"Design hit counter"},
  {id:363,title:"Max Sum of Rectangle No Larger Than K",difficulty:"Hard",algorithms:["Array","Binary Search","Dynamic Programming","Matrix","TreeSet"],correctAlgorithms:["Array","Binary Search","Dynamic Programming","Matrix"],description:"Maximum rectangle sum ≤ k"},
  {id:364,title:"Nested List Weight Sum II",difficulty:"Medium",algorithms:["DFS","BFS","Recursion","Nested Structure","Level Sum"],correctAlgorithms:["DFS","BFS"],description:"Weight sum inverse by depth"},
  {id:365,title:"Water and Jug Problem",difficulty:"Medium",algorithms:["Math","DFS","BFS","GCD","Bezout"],correctAlgorithms:["Math","DFS","BFS"],description:"Measure water with jugs"},
  {id:366,title:"Find Leaves of Binary Tree",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Height","Bottom-up"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Remove leaves layer by layer"},
  {id:367,title:"Valid Perfect Square",difficulty:"Easy",algorithms:["Math","Binary Search","Newton's Method","Pattern","Iteration"],correctAlgorithms:["Math","Binary Search"],description:"Check if perfect square"},
  {id:368,title:"Largest Divisible Subset",difficulty:"Medium",algorithms:["Array","Math","Dynamic Programming","Sorting","Subset"],correctAlgorithms:["Array","Math","Dynamic Programming","Sorting"],description:"Find largest divisible subset"},
  {id:369,title:"Plus One Linked List",difficulty:"Medium",algorithms:["Linked List","Math","Recursion","Carry","Reverse"],correctAlgorithms:["Linked List","Math"],description:"Add one to linked list number"},
  {id:370,title:"Range Addition",difficulty:"Medium",algorithms:["Array","Prefix Sum","Difference Array","Range Update","Optimization"],correctAlgorithms:["Array","Prefix Sum"],description:"Apply range additions"},
  {id:371,title:"Sum of Two Integers",difficulty:"Medium",algorithms:["Math","Bit Manipulation","Carry","XOR","AND"],correctAlgorithms:["Math","Bit Manipulation"],description:"Add without + operator"},
  {id:372,title:"Super Pow",difficulty:"Medium",algorithms:["Math","Divide and Conquer","Modular Arithmetic","Euler's Theorem","Pattern"],correctAlgorithms:["Math","Divide and Conquer"],description:"Calculate super power modulo"},
  {id:373,title:"Find K Pairs with Smallest Sums",difficulty:"Medium",algorithms:["Array","Heap","Priority Queue","K-way Merge","Optimization"],correctAlgorithms:["Array","Heap"],description:"Find k smallest pairs"},
  {id:374,title:"Guess Number Higher or Lower",difficulty:"Easy",algorithms:["Binary Search","Interactive","API Design","Guessing Game","Optimization"],correctAlgorithms:["Binary Search","Interactive"],description:"Guess number game"},
  {id:375,title:"Guess Number Higher or Lower II",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Minimax","Game Theory","Interval DP"],correctAlgorithms:["Math","Dynamic Programming","Minimax"],description:"Minimum money to guarantee win"},
  {id:376,title:"Wiggle Subsequence",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Greedy","State Machine","Peak Valley"],correctAlgorithms:["Array","Dynamic Programming","Greedy"],description:"Longest wiggle subsequence"},
  {id:377,title:"Combination Sum IV",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Permutation","Memoization","Target Sum"],correctAlgorithms:["Array","Dynamic Programming"],description:"Count combinations to target"},
  {id:378,title:"Kth Smallest Element in Sorted Matrix",difficulty:"Medium",algorithms:["Array","Binary Search","Heap","Matrix","Priority Queue"],correctAlgorithms:["Array","Binary Search","Heap","Matrix"],description:"Find kth smallest in matrix"},
  {id:379,title:"Design Phone Directory",difficulty:"Medium",algorithms:["Array","Hash Table","Design","Queue","Set"],correctAlgorithms:["Array","Hash Table","Design","Queue"],description:"Design phone directory"},
  {id:380,title:"Insert Delete GetRandom O(1)",difficulty:"Medium",algorithms:["Array","Hash Table","Design","Randomized","ArrayList"],correctAlgorithms:["Array","Hash Table","Design","Randomized"],description:"O(1) insert/delete/getRandom"},
  {id:381,title:"Insert Delete GetRandom Duplicates",difficulty:"Hard",algorithms:["Array","Hash Table","Design","Randomized","Multiset"],correctAlgorithms:["Array","Hash Table","Design","Randomized"],description:"O(1) operations with duplicates"},
  {id:382,title:"Linked List Random Node",difficulty:"Medium",algorithms:["Linked List","Math","Reservoir Sampling","Randomized","Probability"],correctAlgorithms:["Linked List","Math","Reservoir Sampling","Randomized"],description:"Random node from linked list"},
  {id:383,title:"Ransom Note",difficulty:"Easy",algorithms:["Hash Table","String","Counting","Array","Character Count"],correctAlgorithms:["Hash Table","String","Counting"],description:"Check if ransom note possible"},
  {id:384,title:"Shuffle an Array",difficulty:"Medium",algorithms:["Array","Math","Randomized","Fisher-Yates","Permutation"],correctAlgorithms:["Array","Math","Randomized"],description:"Shuffle array randomly"},
  {id:385,title:"Mini Parser",difficulty:"Medium",algorithms:["String","Stack","DFS","Recursion","Parsing"],correctAlgorithms:["String","Stack","DFS"],description:"Parse nested integer"},
  {id:386,title:"Lexicographical Numbers",difficulty:"Medium",algorithms:["DFS","Trie","Iteration","Lexicographic Order","Tree"],correctAlgorithms:["DFS","Trie"],description:"Generate lexicographical order"},
  {id:387,title:"First Unique Character",difficulty:"Easy",algorithms:["Hash Table","String","Queue","Counting","Array"],correctAlgorithms:["Hash Table","String","Queue","Counting"],description:"Find first unique character"},
  {id:388,title:"Longest Absolute File Path",difficulty:"Medium",algorithms:["String","Stack","DFS","Simulation","Path Processing"],correctAlgorithms:["String","Stack","DFS"],description:"Find longest file path"},
  {id:389,title:"Find the Difference",difficulty:"Easy",algorithms:["Hash Table","String","Bit Manipulation","Sorting","XOR"],correctAlgorithms:["Hash Table","String","Bit Manipulation","Sorting"],description:"Find added character"},
  {id:390,title:"Elimination Game",difficulty:"Medium",algorithms:["Math","Recursion","Pattern","Josephus Problem","Simulation"],correctAlgorithms:["Math","Recursion"],description:"Find last remaining number"},
  {id:391,title:"Perfect Rectangle",difficulty:"Hard",algorithms:["Array","Line Sweep","Geometry","Set","Corner Count"],correctAlgorithms:["Array","Line Sweep","Geometry"],description:"Check if perfect rectangle"},
  {id:392,title:"Is Subsequence",difficulty:"Easy",algorithms:["Two Pointers","String","Dynamic Programming","Binary Search","Greedy"],correctAlgorithms:["Two Pointers","String","Dynamic Programming","Binary Search","Greedy"],description:"Check if subsequence"},
  {id:393,title:"UTF-8 Validation",difficulty:"Medium",algorithms:["Array","Bit Manipulation","Validation","State Machine","Encoding"],correctAlgorithms:["Array","Bit Manipulation"],description:"Validate UTF-8 encoding"},
  {id:394,title:"Decode String",difficulty:"Medium",algorithms:["String","Stack","DFS","Recursion","Parsing"],correctAlgorithms:["String","Stack","DFS","Recursion"],description:"Decode encoded string"},
  {id:395,title:"Longest Substring with K Repeating",difficulty:"Medium",algorithms:["Hash Table","String","Divide and Conquer","Sliding Window","Recursion"],correctAlgorithms:["Hash Table","String","Divide and Conquer","Sliding Window","Recursion"],description:"Longest substring with k repeating chars"},
  {id:396,title:"Rotate Function",difficulty:"Medium",algorithms:["Array","Math","Dynamic Programming","Prefix Sum","Pattern"],correctAlgorithms:["Array","Math","Dynamic Programming","Prefix Sum"],description:"Maximum rotation function"},
  {id:397,title:"Integer Replacement",difficulty:"Medium",algorithms:["Dynamic Programming","Greedy","Bit Manipulation","Memoization","Math"],correctAlgorithms:["Dynamic Programming","Greedy","Bit Manipulation","Memoization"],description:"Minimum replacements to reach 1"},
  {id:398,title:"Random Pick Index",difficulty:"Medium",algorithms:["Array","Hash Table","Math","Reservoir Sampling","Randomized"],correctAlgorithms:["Array","Hash Table","Math","Reservoir Sampling","Randomized"],description:"Random pick with target"},
  {id:399,title:"Evaluate Division",difficulty:"Medium",algorithms:["Array","DFS","BFS","Union Find","Graph"],correctAlgorithms:["Array","DFS","BFS","Union Find","Graph"],description:"Evaluate division equations"},
  {id:400,title:"Nth Digit",difficulty:"Medium",algorithms:["Math","Binary Search","Pattern","Digit Count","Range"],correctAlgorithms:["Math","Binary Search"],description:"Find nth digit in sequence"},
  
  // Problems 401-500
  {id:401,title:"Binary Watch",difficulty:"Easy",algorithms:["Backtracking","Bit Manipulation","Enumeration","Combination","Binary"],correctAlgorithms:["Backtracking","Bit Manipulation"],description:"Read binary watch"},
  {id:402,title:"Remove K Digits",difficulty:"Medium",algorithms:["String","Stack","Greedy","Monotonic Stack","Digit"],correctAlgorithms:["String","Stack","Greedy","Monotonic Stack"],description:"Remove k digits for smallest"},
  {id:403,title:"Frog Jump",difficulty:"Hard",algorithms:["Array","Dynamic Programming","DFS","BFS","Memoization"],correctAlgorithms:["Array","Dynamic Programming","DFS","BFS"],description:"Can frog cross river"},
  {id:404,title:"Sum of Left Leaves",difficulty:"Easy",algorithms:["Tree","DFS","BFS","Binary Tree","Recursion"],correctAlgorithms:["Tree","DFS","BFS","Binary Tree"],description:"Sum of all left leaves"},
  {id:405,title:"Convert Number to Hexadecimal",difficulty:"Easy",algorithms:["Math","Bit Manipulation","Two's Complement","Base Conversion","String"],correctAlgorithms:["Math","Bit Manipulation"],description:"Convert to hexadecimal"},
  {id:406,title:"Queue Reconstruction by Height",difficulty:"Medium",algorithms:["Array","Binary Indexed Tree","Segment Tree","Greedy","Sorting"],correctAlgorithms:["Array","Greedy","Sorting"],description:"Reconstruct queue by height"},
  {id:407,title:"Trapping Rain Water II",difficulty:"Hard",algorithms:["Array","Heap","BFS","Matrix","Priority Queue"],correctAlgorithms:["Array","Heap","BFS","Matrix"],description:"Trap rainwater in 3D"},
  {id:408,title:"Valid Word Abbreviation",difficulty:"Easy",algorithms:["Two Pointers","String","Validation","Parsing","Edge Cases"],correctAlgorithms:["Two Pointers","String"],description:"Check valid abbreviation"},
  {id:409,title:"Longest Palindrome",difficulty:"Easy",algorithms:["Hash Table","String","Greedy","Counting","Odd/Even"],correctAlgorithms:["Hash Table","String","Greedy"],description:"Build longest palindrome"},
  {id:410,title:"Split Array Largest Sum",difficulty:"Hard",algorithms:["Array","Binary Search","Dynamic Programming","Greedy","Min-Max"],correctAlgorithms:["Array","Binary Search","Dynamic Programming","Greedy"],description:"Minimize largest sum in splits"},
  {id:411,title:"Minimum Unique Word Abbreviation",difficulty:"Hard",algorithms:["String","Backtracking","Bit Manipulation","DFS","Abbreviation"],correctAlgorithms:["String","Backtracking","Bit Manipulation"],description:"Shortest unique abbreviation"},
  {id:412,title:"Fizz Buzz",difficulty:"Easy",algorithms:["Math","String","Simulation","Modulo","Pattern"],correctAlgorithms:["Math","String","Simulation"],description:"Classic FizzBuzz problem"},
  {id:413,title:"Arithmetic Slices",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Math","Pattern","Counting"],correctAlgorithms:["Array","Dynamic Programming","Math"],description:"Count arithmetic slices"},
  {id:414,title:"Third Maximum Number",difficulty:"Easy",algorithms:["Array","Sorting","Set","Priority Queue","Linear Scan"],correctAlgorithms:["Array","Sorting"],description:"Find third maximum"},
  {id:415,title:"Add Strings",difficulty:"Easy",algorithms:["Math","String","Simulation","Big Integer","Carry"],correctAlgorithms:["Math","String","Simulation"],description:"Add two string numbers"},
  {id:417,title:"Pacific Atlantic Water Flow",difficulty:"Medium",algorithms:["Array","DFS","BFS","Matrix","Multi-source"],correctAlgorithms:["Array","DFS","BFS","Matrix"],description:"Water flow to both oceans"},
  {id:418,title:"Sentence Screen Fitting",difficulty:"Medium",algorithms:["Array","String","Dynamic Programming","Simulation","Optimization"],correctAlgorithms:["Array","String","Dynamic Programming"],description:"Fit sentence on screen"},
  {id:419,title:"Battleships in a Board",difficulty:"Medium",algorithms:["Array","DFS","Matrix","Counting","One Pass"],correctAlgorithms:["Array","DFS","Matrix"],description:"Count battleships"},
  {id:420,title:"Strong Password Checker",difficulty:"Hard",algorithms:["String","Greedy","Heap","Priority","Validation"],correctAlgorithms:["String","Greedy","Heap"],description:"Minimum changes for strong password"},
  {id:421,title:"Maximum XOR of Two Numbers",difficulty:"Medium",algorithms:["Array","Hash Table","Bit Manipulation","Trie","Prefix"],correctAlgorithms:["Array","Hash Table","Bit Manipulation","Trie"],description:"Maximum XOR of two numbers"},
  {id:422,title:"Valid Word Square",difficulty:"Easy",algorithms:["Array","Matrix","String","Validation","Transpose"],correctAlgorithms:["Array","Matrix","String"],description:"Check if word square"},
  {id:423,title:"Reconstruct Original Digits",difficulty:"Medium",algorithms:["Hash Table","Math","String","Greedy","Pattern"],correctAlgorithms:["Hash Table","Math","String","Greedy"],description:"Reconstruct digits from English"},
  {id:425,title:"Word Squares",difficulty:"Hard",algorithms:["Array","String","Backtracking","Trie","DFS"],correctAlgorithms:["Array","String","Backtracking","Trie"],description:"Generate word squares"},
  {id:426,title:"Convert BST to Sorted Doubly Linked List",difficulty:"Medium",algorithms:["Linked List","Stack","Tree","DFS","Binary Search Tree"],correctAlgorithms:["Linked List","Stack","Tree","DFS","Binary Search Tree"],description:"Convert BST to circular DLL"},
  {id:427,title:"Construct Quad Tree",difficulty:"Medium",algorithms:["Array","Divide and Conquer","Tree","Matrix","Recursion"],correctAlgorithms:["Array","Divide and Conquer","Tree","Matrix"],description:"Build quad tree from grid"},
  {id:428,title:"Serialize and Deserialize N-ary Tree",difficulty:"Hard",algorithms:["String","Tree","DFS","BFS","Design"],correctAlgorithms:["String","Tree","DFS","BFS","Design"],description:"Serialize/deserialize N-ary tree"},
  {id:429,title:"N-ary Tree Level Order Traversal",difficulty:"Medium",algorithms:["Tree","BFS","Queue","N-ary Tree","Level Order"],correctAlgorithms:["Tree","BFS"],description:"Level order of N-ary tree"},
  {id:430,title:"Flatten Multilevel Doubly Linked List",difficulty:"Medium",algorithms:["Linked List","DFS","Stack","Recursion","Doubly Linked List"],correctAlgorithms:["Linked List","DFS","Stack"],description:"Flatten multilevel linked list"},
  {id:431,title:"Encode N-ary Tree to Binary Tree",difficulty:"Hard",algorithms:["Tree","DFS","Binary Tree","N-ary Tree","Encoding"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Encode N-ary as binary tree"},
  {id:432,title:"All O`one Data Structure",difficulty:"Hard",algorithms:["Hash Table","Linked List","Design","Doubly Linked List","Bucket"],correctAlgorithms:["Hash Table","Linked List","Design"],description:"O(1) inc/dec/getMax/getMin"},
  {id:433,title:"Minimum Genetic Mutation",difficulty:"Medium",algorithms:["Hash Table","String","BFS","Graph","Shortest Path"],correctAlgorithms:["Hash Table","String","BFS"],description:"Minimum genetic mutations"},
  {id:434,title:"Number of Segments in a String",difficulty:"Easy",algorithms:["String","Two Pointers","Split","Counting","Edge Cases"],correctAlgorithms:["String"],description:"Count segments in string"},
  {id:436,title:"Find Right Interval",difficulty:"Medium",algorithms:["Array","Binary Search","Sorting","TreeMap","Interval"],correctAlgorithms:["Array","Binary Search","Sorting"],description:"Find right interval"},
  {id:437,title:"Path Sum III",difficulty:"Medium",algorithms:["Tree","DFS","Binary Tree","Prefix Sum","Hash Table"],correctAlgorithms:["Tree","DFS","Binary Tree"],description:"Count paths with target sum"},
  {id:438,title:"Find All Anagrams",difficulty:"Medium",algorithms:["Hash Table","String","Sliding Window","Counting","Permutation"],correctAlgorithms:["Hash Table","String","Sliding Window"],description:"Find all anagram positions"},
  {id:439,title:"Ternary Expression Parser",difficulty:"Medium",algorithms:["String","Stack","DFS","Recursion","Parsing"],correctAlgorithms:["String","Stack","DFS"],description:"Parse ternary expression"},
  {id:440,title:"K-th Smallest in Lexicographical Order",difficulty:"Hard",algorithms:["Math","Trie","DFS","Counting","Lexicographic"],correctAlgorithms:["Math","Trie"],description:"Find kth lexicographical number"},
  {id:441,title:"Arranging Coins",difficulty:"Easy",algorithms:["Math","Binary Search","Quadratic Formula","Pattern","Sum"],correctAlgorithms:["Math","Binary Search"],description:"Arrange coins in staircase"},
  {id:442,title:"Find All Duplicates",difficulty:"Medium",algorithms:["Array","Hash Table","Cyclic Sort","Marking","In-place"],correctAlgorithms:["Array","Hash Table"],description:"Find all duplicates"},
  {id:443,title:"String Compression",difficulty:"Medium",algorithms:["Two Pointers","String","In-place","Counting","Compression"],correctAlgorithms:["Two Pointers","String"],description:"Compress string with counts"},
  {id:444,title:"Sequence Reconstruction",difficulty:"Medium",algorithms:["Array","Graph","Topological Sort","BFS","Validation"],correctAlgorithms:["Array","Graph","Topological Sort","BFS"],description:"Verify unique sequence"},
  {id:445,title:"Add Two Numbers II",difficulty:"Medium",algorithms:["Linked List","Math","Stack","Recursion","Reverse"],correctAlgorithms:["Linked List","Math","Stack"],description:"Add numbers without reversing"},
  {id:446,title:"Arithmetic Slices II",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Hash Table","Subsequence","Math"],correctAlgorithms:["Array","Dynamic Programming","Hash Table"],description:"Count arithmetic subsequences"},
  {id:447,title:"Number of Boomerangs",difficulty:"Medium",algorithms:["Array","Hash Table","Math","Distance","Counting"],correctAlgorithms:["Array","Hash Table","Math"],description:"Count boomerang tuples"},
  {id:448,title:"Find All Numbers Disappeared",difficulty:"Easy",algorithms:["Array","Hash Table","Cyclic Sort","Marking","In-place"],correctAlgorithms:["Array","Hash Table"],description:"Find missing numbers"},
  {id:449,title:"Serialize and Deserialize BST",difficulty:"Medium",algorithms:["String","Tree","DFS","Binary Search Tree","Preorder"],correctAlgorithms:["String","Tree","DFS","Binary Search Tree"],description:"Serialize/deserialize BST"},
  {id:450,title:"Delete Node in a BST",difficulty:"Medium",algorithms:["Tree","Binary Search Tree","Recursion","Successor","Predecessor"],correctAlgorithms:["Tree","Binary Search Tree","Recursion"],description:"Delete node from BST"},
  {id:451,title:"Sort Characters By Frequency",difficulty:"Medium",algorithms:["Hash Table","String","Sorting","Heap","Bucket Sort"],correctAlgorithms:["Hash Table","String","Sorting","Heap","Bucket Sort"],description:"Sort by character frequency"},
  {id:452,title:"Minimum Number of Arrows",difficulty:"Medium",algorithms:["Array","Greedy","Sorting","Interval","Activity Selection"],correctAlgorithms:["Array","Greedy","Sorting"],description:"Minimum arrows to burst balloons"},
  {id:453,title:"Minimum Moves to Equal Array",difficulty:"Medium",algorithms:["Array","Math","Greedy","Pattern","Observation"],correctAlgorithms:["Array","Math"],description:"Minimum moves to equalize"},
  {id:454,title:"4Sum II",difficulty:"Medium",algorithms:["Array","Hash Table","Two Sum","Divide","Optimization"],correctAlgorithms:["Array","Hash Table"],description:"Count 4-sum tuples"},
  {id:455,title:"Assign Cookies",difficulty:"Easy",algorithms:["Array","Two Pointers","Greedy","Sorting","Assignment"],correctAlgorithms:["Array","Two Pointers","Greedy","Sorting"],description:"Maximize content children"},
  {id:456,title:"132 Pattern",difficulty:"Medium",algorithms:["Array","Stack","Monotonic Stack","Binary Search","Pattern"],correctAlgorithms:["Array","Stack","Monotonic Stack","Binary Search"],description:"Find 132 pattern"},
  {id:457,title:"Circular Array Loop",difficulty:"Medium",algorithms:["Array","Hash Table","Two Pointers","Floyd's Cycle","Simulation"],correctAlgorithms:["Array","Hash Table","Two Pointers"],description:"Detect circular loop"},
  {id:458,title:"Poor Pigs",difficulty:"Hard",algorithms:["Math","Dynamic Programming","Combinatorics","Information Theory","Strategy"],correctAlgorithms:["Math","Dynamic Programming","Combinatorics"],description:"Minimum pigs to find poison"},
  {id:459,title:"Repeated Substring Pattern",difficulty:"Easy",algorithms:["String","String Matching","KMP","Pattern","Rotation"],correctAlgorithms:["String","String Matching"],description:"Check repeated substring"},
  {id:460,title:"LFU Cache",difficulty:"Hard",algorithms:["Hash Table","Linked List","Design","Doubly Linked List","TreeSet"],correctAlgorithms:["Hash Table","Linked List","Design"],description:"Design LFU cache"},
  {id:461,title:"Hamming Distance",difficulty:"Easy",algorithms:["Bit Manipulation","XOR","Brian Kernighan","Counting","Binary"],correctAlgorithms:["Bit Manipulation"],description:"Calculate Hamming distance"},
  {id:462,title:"Minimum Moves to Equal Array II",difficulty:"Medium",algorithms:["Array","Math","Sorting","Median","Quick Select"],correctAlgorithms:["Array","Math","Sorting"],description:"Minimum moves with increment/decrement"},
  {id:463,title:"Island Perimeter",difficulty:"Easy",algorithms:["Array","DFS","BFS","Matrix","Counting"],correctAlgorithms:["Array","DFS","BFS","Matrix"],description:"Calculate island perimeter"},
  {id:464,title:"Can I Win",difficulty:"Medium",algorithms:["Math","Dynamic Programming","Memoization","Game Theory","Minimax"],correctAlgorithms:["Math","Dynamic Programming","Memoization","Minimax"],description:"Determine winning strategy"},
  {id:465,title:"Optimal Account Balancing",difficulty:"Hard",algorithms:["Array","Dynamic Programming","Backtracking","Bit Manipulation","Graph"],correctAlgorithms:["Array","Dynamic Programming","Backtracking","Bit Manipulation"],description:"Minimize transactions to settle"},
  {id:466,title:"Count The Repetitions",difficulty:"Hard",algorithms:["String","Dynamic Programming","Pattern","Cycle Detection","Optimization"],correctAlgorithms:["String","Dynamic Programming"],description:"Count string repetitions"},
  {id:467,title:"Unique Substrings in Wraparound String",difficulty:"Medium",algorithms:["String","Dynamic Programming","Sliding Window","Hash Table","Pattern"],correctAlgorithms:["String","Dynamic Programming"],description:"Count unique substrings"},
  {id:468,title:"Validate IP Address",difficulty:"Medium",algorithms:["String","Validation","Regular Expression","Parsing","Edge Cases"],correctAlgorithms:["String"],description:"Validate IPv4 or IPv6"},
  {id:469,title:"Convex Polygon",difficulty:"Medium",algorithms:["Array","Math","Geometry","Cross Product","Validation"],correctAlgorithms:["Array","Math","Geometry"],description:"Check if convex polygon"},
  {id:470,title:"Implement Rand10() Using Rand7()",difficulty:"Medium",algorithms:["Math","Rejection Sampling","Probability","Randomized","Uniform Distribution"],correctAlgorithms:["Math","Rejection Sampling","Randomized"],description:"Generate rand10 from rand7"},
  {id:471,title:"Encode String with Shortest Length",difficulty:"Hard",algorithms:["String","Dynamic Programming","Compression","Pattern","Memoization"],correctAlgorithms:["String","Dynamic Programming"],description:"Encode to shortest length"},
  {id:472,title:"Concatenated Words",difficulty:"Hard",algorithms:["Array","String","Dynamic Programming","DFS","Trie"],correctAlgorithms:["Array","String","Dynamic Programming","DFS","Trie"],description:"Find concatenated words"},
  {id:473,title:"Matchsticks to Square",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Backtracking","Bit Manipulation","DFS"],correctAlgorithms:["Array","Dynamic Programming","Backtracking","Bit Manipulation"],description:"Form square with matchsticks"},
  {id:474,title:"Ones and Zeroes",difficulty:"Medium",algorithms:["Array","String","Dynamic Programming","0/1 Knapsack","Optimization"],correctAlgorithms:["Array","String","Dynamic Programming"],description:"Maximum subset with m 0s and n 1s"},
  {id:475,title:"Heaters",difficulty:"Medium",algorithms:["Array","Two Pointers","Binary Search","Sorting","Greedy"],correctAlgorithms:["Array","Two Pointers","Binary Search","Sorting"],description:"Minimum heater radius"},
  {id:476,title:"Number Complement",difficulty:"Easy",algorithms:["Bit Manipulation","Math","XOR","Mask","Binary"],correctAlgorithms:["Bit Manipulation","Math"],description:"Find number complement"},
  {id:477,title:"Total Hamming Distance",difficulty:"Medium",algorithms:["Array","Math","Bit Manipulation","Counting","Pattern"],correctAlgorithms:["Array","Math","Bit Manipulation"],description:"Sum of Hamming distances"},
  {id:478,title:"Generate Random Point in Circle",difficulty:"Medium",algorithms:["Math","Geometry","Rejection Sampling","Randomized","Polar Coordinates"],correctAlgorithms:["Math","Geometry","Rejection Sampling","Randomized"],description:"Random point in circle"},
  {id:479,title:"Largest Palindrome Product",difficulty:"Hard",algorithms:["Math","Enumeration","Palindrome","Modulo","Pattern"],correctAlgorithms:["Math","Enumeration"],description:"Largest palindrome from product"},
  {id:480,title:"Sliding Window Median",difficulty:"Hard",algorithms:["Array","Hash Table","Sliding Window","Heap","Two Heaps"],correctAlgorithms:["Array","Hash Table","Sliding Window","Heap"],description:"Median in sliding window"},
  {id:481,title:"Magical String",difficulty:"Medium",algorithms:["Two Pointers","String","Simulation","Pattern","Self-describing"],correctAlgorithms:["Two Pointers","String"],description:"Count 1s in magical string"},
  {id:482,title:"License Key Formatting",difficulty:"Easy",algorithms:["String","Formatting","Reverse","Pattern","Edge Cases"],correctAlgorithms:["String"],description:"Format license key"},
  {id:483,title:"Smallest Good Base",difficulty:"Hard",algorithms:["Math","Binary Search","Number Theory","Base Conversion","Pattern"],correctAlgorithms:["Math","Binary Search"],description:"Find smallest good base"},
  {id:484,title:"Find Permutation",difficulty:"Medium",algorithms:["Stack","Greedy","String","Permutation","Pattern"],correctAlgorithms:["Stack","Greedy","String"],description:"Construct permutation from pattern"},
  {id:485,title:"Max Consecutive Ones",difficulty:"Easy",algorithms:["Array","Two Pointers","Sliding Window","Counting","Linear Scan"],correctAlgorithms:["Array"],description:"Maximum consecutive 1s"},
  {id:486,title:"Predict the Winner",difficulty:"Medium",algorithms:["Array","Math","Dynamic Programming","Recursion","Game Theory","Minimax"],correctAlgorithms:["Array","Math","Dynamic Programming","Recursion","Minimax"],description:"Predict game winner"},
  {id:487,title:"Max Consecutive Ones II",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Sliding Window","Two Pointers","Flip"],correctAlgorithms:["Array","Dynamic Programming","Sliding Window","Two Pointers"],description:"Maximum 1s with one flip"},
  {id:488,title:"Zuma Game",difficulty:"Hard",algorithms:["String","Dynamic Programming","Backtracking","BFS","Memoization"],correctAlgorithms:["String","Dynamic Programming","Backtracking","BFS"],description:"Minimum balls to clear board"},
  {id:489,title:"Robot Room Cleaner",difficulty:"Hard",algorithms:["Backtracking","Design","Interactive","DFS","Spiral"],correctAlgorithms:["Backtracking","Design","Interactive"],description:"Clean room with robot"},
  {id:490,title:"The Maze",difficulty:"Medium",algorithms:["DFS","BFS","Graph","Matrix","Shortest Path"],correctAlgorithms:["DFS","BFS","Graph","Matrix"],description:"Can ball reach destination"},
  {id:491,title:"Non-decreasing Subsequences",difficulty:"Medium",algorithms:["Array","Hash Table","Backtracking","Bit Manipulation","DFS"],correctAlgorithms:["Array","Hash Table","Backtracking","Bit Manipulation"],description:"Find non-decreasing subsequences"},
  {id:492,title:"Construct the Rectangle",difficulty:"Easy",algorithms:["Math","Square Root","Factors","Optimization","Pattern"],correctAlgorithms:["Math"],description:"Construct rectangle from area"},
  {id:493,title:"Reverse Pairs",difficulty:"Hard",algorithms:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Merge Sort"],correctAlgorithms:["Array","Binary Search","Divide and Conquer","Binary Indexed Tree","Segment Tree"],description:"Count reverse pairs"},
  {id:494,title:"Target Sum",difficulty:"Medium",algorithms:["Array","Dynamic Programming","Backtracking","0/1 Knapsack","Subset Sum"],correctAlgorithms:["Array","Dynamic Programming","Backtracking"],description:"Ways to assign +/- for target"},
  {id:495,title:"Teemo Attacking",difficulty:"Easy",algorithms:["Array","Simulation","Interval","Merge","Time"],correctAlgorithms:["Array","Simulation"],description:"Total poison duration"},
  {id:496,title:"Next Greater Element I",difficulty:"Easy",algorithms:["Array","Hash Table","Stack","Monotonic Stack","Next Greater"],correctAlgorithms:["Array","Hash Table","Stack","Monotonic Stack"],description:"Find next greater element"},
  {id:497,title:"Random Point in Non-overlapping Rectangles",difficulty:"Medium",algorithms:["Array","Math","Binary Search","Prefix Sum","Randomized"],correctAlgorithms:["Array","Math","Binary Search","Prefix Sum","Randomized"],description:"Random point in rectangles"},
  {id:498,title:"Diagonal Traverse",difficulty:"Medium",algorithms:["Array","Matrix","Simulation","Pattern","Direction"],correctAlgorithms:["Array","Matrix","Simulation"],description:"Diagonal order traversal"},
  {id:499,title:"The Maze III",difficulty:"Hard",algorithms:["DFS","BFS","Graph","Heap","Shortest Path"],correctAlgorithms:["DFS","BFS","Graph","Heap"],description:"Shortest path in maze"},
  {id:500,title:"Keyboard Row",difficulty:"Easy",algorithms:["Array","Hash Table","String","Set","Pattern"],correctAlgorithms:["Array","Hash Table","String"],description:"Words from one keyboard row"}
];