const fs = require('fs');
const path = require('path');
const ProblemLoader = require('../lib/problem-loader');

// Initialize the problem loader
const loader = new ProblemLoader();

// Get statistics
const stats = loader.getStatistics();

console.log('ðŸ“Š Updating application with full dataset...');
console.log(`Total problems: ${stats.total}`);
console.log(`Difficulty breakdown:`, stats.byDifficulty);
console.log(`Total agents: ${stats.totalAgents}`);
console.log(`Total algorithms: ${stats.algorithms.length}`);

// Create client-side data export
const clientData = {
  problems: loader.getAllProblems(),
  statistics: stats,
  easyProblems: loader.getProblemsByDifficulty('Easy'),
  mediumProblems: loader.getProblemsByDifficulty('Medium'),
  hardProblems: loader.getProblemsByDifficulty('Hard'),
  algorithms: stats.algorithms,
  agentCount: stats.totalAgents,
  lastUpdated: new Date().toISOString()
};

// Save client data
const clientDataPath = path.join(__dirname, '../data/client-data.json');
fs.writeFileSync(clientDataPath, JSON.stringify(clientData, null, 2));

console.log(`âœ… Client data saved to ${clientDataPath}`);

// Create sample quiz data for testing
const sampleQuiz = {
  practice: loader.getRandomProblems(5, 'Mixed'),
  timedChallenge: loader.getRandomProblems(10, 'Mixed'),
  easy: loader.getRandomProblems(10, 'Easy'),
  medium: loader.getRandomProblems(10, 'Medium'),
  hard: loader.getRandomProblems(10, 'Hard')
};

const sampleQuizPath = path.join(__dirname, '../data/sample-quiz.json');
fs.writeFileSync(sampleQuizPath, JSON.stringify(sampleQuiz, null, 2));

console.log(`âœ… Sample quiz data saved to ${sampleQuizPath}`);

// Update the main data export for components
const componentDataPath = path.join(__dirname, '../data/problems-export.js');
const componentData = `// Auto-generated from all 3662 LeetCode problems
// Last updated: ${new Date().toISOString()}
// Generated by parallel agent system

export const ALL_PROBLEMS = ${JSON.stringify(loader.getAllProblems(), null, 2)};

export const PROBLEM_STATISTICS = ${JSON.stringify(stats, null, 2)};

export const ALGORITHMS = ${JSON.stringify(stats.algorithms, null, 2)};

export const PROBLEMS_BY_DIFFICULTY = {
  Easy: ${JSON.stringify(loader.getProblemsByDifficulty('Easy'), null, 2)},
  Medium: ${JSON.stringify(loader.getProblemsByDifficulty('Medium'), null, 2)},
  Hard: ${JSON.stringify(loader.getProblemsByDifficulty('Hard'), null, 2)}
};

export const AGENT_COUNT = ${stats.totalAgents};

// Utility functions
export function getRandomProblems(count = 10, difficulty = null) {
  let problems = difficulty ? PROBLEMS_BY_DIFFICULTY[difficulty] : ALL_PROBLEMS;
  const shuffled = [...problems].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, Math.min(count, shuffled.length));
}

export function getProblemsByAlgorithm(algorithm) {
  return ALL_PROBLEMS.filter(problem => 
    problem.algorithms.some(alg => 
      alg.toLowerCase().includes(algorithm.toLowerCase())
    )
  );
}

export function searchProblems(query) {
  const searchTerm = query.toLowerCase();
  return ALL_PROBLEMS.filter(problem => 
    problem.title.toLowerCase().includes(searchTerm) ||
    problem.description.toLowerCase().includes(searchTerm) ||
    problem.algorithms.some(alg => alg.toLowerCase().includes(searchTerm))
  );
}
`;

fs.writeFileSync(componentDataPath, componentData);
console.log(`âœ… Component data export saved to ${componentDataPath}`);

console.log('\nðŸŽ‰ Application successfully updated with all 3662 problems!');
console.log('ðŸ“ˆ Ready for parallel agent processing!');
console.log(`ðŸ¤– ${stats.totalAgents} agents available for work distribution`);

// Show sample of problems
console.log('\nðŸ“‹ Sample Problems:');
loader.getRandomProblems(5).forEach(problem => {
  console.log(`  ${problem.id}: ${problem.title} (${problem.difficulty}) - ${problem.algorithms.join(', ')}`);
});